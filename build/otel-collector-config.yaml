exporters:
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
extensions:
  health_check: {}
  memory_ballast:
    size_mib: "204"

processors:
  memory_limiter:
    check_interval: 5s
    limit_mib: 409
    spike_limit_mib: 128
  prometheustypeconvert:
    transforms:
      - include: container_cpu_usage_seconds_total
        convert_type: sum
      - include: container_cpu_cfs_throttled_periods_total
        convert_type: sum
      - include: container_cpu_cfs_periods_total
        convert_type: sum
  metricstransform/rename:
    transforms:
      # add `k8s.` suffix to all metrics that are clearly provided by Kubernetes
      - include: ^(kube_|container_)(.*)$$
        match_type: regexp
        action: update
        new_name: k8s.$${1}$${2}
  # Transformations done on all metrics before any grouping
  swmetricstransform:
    transforms:
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "Ready" }
        action: insert
        new_name: k8s.kube_node_status_ready
        operations:
          - action: filter_datapoints
            datapoint_value: 1
          - action: update_label
            label: status
            value_actions:
              - value: "true"
                new_value: "Ready"
              - value: "false"
                new_value: "NotReady"
              - value: unknown
                new_value: Unknown
          - action: update_label
            label: status
            new_label: sw.k8s.node.status
  metricstransform/preprocessing:
    transforms:
      - include: k8s.kube_namespace_status_phase
        action: update
        operations:
          - action: update_label
            label: phase
            new_label: sw.k8s.namespace.status
      - include: k8s.kube_pod_status_phase
        action: update
        operations:
          - action: update_label
            label: phase
            new_label: sw.k8s.pod.status
      - include: k8s.kube_pod_container_status_restarts_total
        action: insert
        new_name: k8s.kube.pod.container.status.restarts.total

      # Container metrics
      - include: k8s.container_cpu_usage_seconds_total
        action: insert
        new_name: k8s.container.cpu.usage.seconds.rate
      - include: k8s.container_cpu_cfs_throttled_periods_total
        action: insert
        match_type: regexp
        # take datapoints with non-empty container label
        experimental_match_labels: { "container": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.container.cpu.cfs.throttled.periods.rate
      - include: k8s.container_cpu_cfs_periods_total
        action: insert
        match_type: regexp
        # take datapoints with non-empty container label
        experimental_match_labels: { "container": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.container.cpu.cfs.throttled.total.rate
      - include: k8s.container_memory_working_set_bytes
        action: insert
        match_type: regexp
        # take datapoints with non-empty container label
        experimental_match_labels: { "container": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.container.memory.working_set
      - include: k8s.container_spec_cpu_quota
        action: insert
        match_type: regexp
        # take datapoints with non-empty container label
        experimental_match_labels: { "container": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.container.spec.cpu.quota
      - include: k8s.container_spec_cpu_period
        action: insert
        match_type: regexp
        # take datapoints with non-empty container label
        experimental_match_labels: { "container": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.container.spec.cpu.period
      - include: k8s.kube_pod_container_resource_requests
        experimental_match_labels: { "resource": "memory" }
        action: insert
        new_name: k8s.container.spec.memory.requests
      - include: k8s.kube_pod_container_resource_requests
        experimental_match_labels: { "resource": "cpu" }
        action: insert
        new_name: k8s.container.spec.cpu.requests
      - include: k8s.container_spec_memory_limit_bytes
        action: insert
        match_type: regexp
        # take datapoints with non-empty container label
        experimental_match_labels: { "container": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.container.spec.memory.limit

      # Pod resource metrics
      - include: k8s.container_cpu_usage_seconds_total
        action: insert
        match_type: regexp
        # empty `image` label and non-empty `pod` and `namespace` are datapoints of Pod's CPU usage
        experimental_match_labels: { "image": "", "pod": "(.|\\s)*\\S(.|\\s)*", "namespace": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.pod.cpu.usage.seconds.rate
      - include: k8s.container_memory_working_set_bytes
        action: insert
        match_type: regexp
        # empty `image` label and non-empty `pod` and `namespace` are datapoints of Pod's Memory usage
        experimental_match_labels: { "image": "", "pod": "(.|\\s)*\\S(.|\\s)*", "namespace": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.pod.memory.working_set
      - include: k8s.container_spec_cpu_quota
        action: insert
        match_type: regexp
        # empty `image` label and non-empty `pod` and `namespace` are datapoints of Pod's Memory usage
        experimental_match_labels: { "image": "", "pod": "(.|\\s)*\\S(.|\\s)*", "namespace": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.pod.spec.cpu.quota
      - include: k8s.container_spec_cpu_period
        action: insert
        match_type: regexp
        # empty `image` label and non-empty `pod` and `namespace` are datapoints of Pod's Memory usage
        experimental_match_labels: { "image": "", "pod": "(.|\\s)*\\S(.|\\s)*", "namespace": "(.|\\s)*\\S(.|\\s)*" }
        new_name: k8s.pod.spec.cpu.period

      # Node metrics
      - include: k8s.container_cpu_usage_seconds_total
        action: insert
        experimental_match_labels: { "id": "/" }
        new_name: k8s.node.cpu.usage.seconds.rate
      - include: k8s.container_memory_working_set_bytes
        action: insert
        experimental_match_labels: { "id": "/" }
        new_name: k8s.node.memory.working_set
      - include: k8s.kube_node_status_capacity
        experimental_match_labels: { "resource": "cpu" }
        action: insert
        new_name: k8s.node.cpu.capacity
      - include: k8s.kube_node_status_allocatable
        experimental_match_labels: { "resource": "cpu" }
        action: insert
        new_name: k8s.node.cpu.allocatable
      - include: k8s.kube_node_status_capacity
        experimental_match_labels: { "resource": "memory" }
        action: insert
        new_name: k8s.node.memory.capacity
      - include: k8s.kube_node_status_allocatable
        experimental_match_labels: { "resource": "memory" }
        action: insert
        new_name: k8s.node.memory.allocatable
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "Ready", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.ready 
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "NetworkUnavailable", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.networkunavailable
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "PIDPressure", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.pidpressure
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "MemoryPressure", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.memorypressure
      - include: k8s.kube_node_status_condition
        experimental_match_labels: { "condition": "DiskPressure", "status": "true" }
        action: insert
        new_name: k8s.node.status.condition.diskpressure
        # Add dummy `host.id` so that we can update it (and only for this metric) later in Resource Attributes processor
      - include: k8s.kube_node_info
        action: update
        operations:
          - action: add_label
            new_label: host.id
            new_value: _

      # Cluster metrics
      - include: k8s.kube_pod_info
        action: insert
        new_name: k8s.cluster.pods
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
      - include: k8s.kube_node_info
        action: insert
        new_name: k8s.cluster.nodes
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
      - include: k8s.node.cpu.capacity
        action: insert
        new_name: k8s.cluster.cpu.capacity
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
      - include: k8s.node.cpu.allocatable
        action: insert
        new_name: k8s.cluster.cpu.allocatable
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
      - include: k8s.node.memory.capacity
        action: insert
        new_name: k8s.cluster.memory.capacity
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
      - include: k8s.node.memory.allocatable
        action: insert
        new_name: k8s.cluster.memory.allocatable
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
      - include: k8s.node.memory.working_set
        action: insert
        new_name: k8s.cluster.memory.working_set
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
  cumulativetodelta:
    include:
      metrics:
        - k8s.container.cpu.usage.seconds.rate
        - k8s.node.cpu.usage.seconds.rate
        - k8s.pod.cpu.usage.seconds.rate
        - k8s.container.cpu.cfs.throttled.periods.rate
        - k8s.container.cpu.cfs.throttled.total.rate
      match_type: strict
  deltatorate:
    metrics:
      - k8s.container.cpu.usage.seconds.rate
      - k8s.node.cpu.usage.seconds.rate
      - k8s.pod.cpu.usage.seconds.rate
      - k8s.container.cpu.cfs.throttled.periods.rate
      - k8s.container.cpu.cfs.throttled.total.rate
  metricstransform/aggregate_rate:
    transforms:
      - include: k8s.node.cpu.usage.seconds.rate
        action: insert
        new_name: k8s.cluster.cpu.usage.seconds.rate
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
  experimental_metricsgeneration/cluster:
    rules:
      - name: k8s.cluster.memory.utilization
        unit: Percent
        type: calculate
        metric1: k8s.cluster.memory.working_set
        metric2: k8s.cluster.memory.allocatable
        operation: percent
      - name: k8s.cluster.cpu.utilization
        unit: Percent
        type: calculate
        metric1: k8s.cluster.cpu.usage.seconds.rate
        metric2: k8s.cluster.cpu.allocatable
        operation: percent
  groupbyattrs/node:
    keys:
      - node
  # Transformations done after grouping per node
  metricstransform/aggregate_node_level:
    transforms:
      - include: k8s.kube_pod_info
        action: insert
        new_name: k8s.node.pods
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
  groupbyattrs/pod:
    keys:
      - namespace
      - pod
  # Transformations done after grouping per pod
  metricstransform/aggregate_pod_level:
    transforms:
      - include: k8s.kube_pod_container_info
        action: insert
        new_name: k8s.pod.containers
        operations:
          - action: aggregate_labels
            label_set: []
            aggregation_type: sum
  groupbyattrs/all:
    keys:
      - kubernetes_io_hostname
      - exported_node
      - kubelet_version
      - provider_id
      - os_image
      - exported_namespace
      - uid
      - pod_ip
      - host_ip
      - created_by_kind
      - created_by_name
      - host_network
      - priority_class
      - container_id
      - container
      - image
      - image_id
      - sw.k8s.pod.status
      - sw.k8s.namespace.status
      - sw.k8s.node.status
      - host.id
  resource:
    attributes:
      # Remove useless attributes
      - key: service.name
        action: delete

      - key: host.name
        action: delete

      - key: port
        action: delete

      - key: scheme
        action: delete

      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: "1.0"
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      # Node
      - key: k8s.node.name
        from_attribute: kubernetes_io_hostname
        action: insert
      - key: kubernetes_io_hostname
        action: delete

      - key: k8s.node.name
        from_attribute: node
        action: upsert
      - key: node
        action: delete

      - key: k8s.node.name
        from_attribute: exported_node
        action: upsert
      - key: exported_node
        action: delete

      - key: host.id
        from_attribute: k8s.node.name
        action: update

      - key: provider_id
        pattern: ^aws.*/(?P<awsInstanceId>[^/]+)$
        action: extract

      - key: host.id
        from_attribute: awsInstanceId
        action: update
      - key: awsInstanceId
        action: delete

      - key: sw.k8s.node.version
        from_attribute: kubelet_version
        action: insert
      - key: kubelet_version
        action: delete

      - key: sw.k8s.node.provider.id
        from_attribute: provider_id
        action: insert
      - key: provider_id
        action: delete

      - key: sw.k8s.node.os.image
        from_attribute: os_image
        action: insert
      - key: os_image
        action: delete

      # Namespace
      - key: k8s.namespace.name
        from_attribute: namespace
        action: insert
      - key: namespace
        action: delete

      - key: k8s.namespace.name
        from_attribute: exported_namespace
        action: upsert
      - key: exported_namespace
        action: delete

      # Pod
      - key: k8s.pod.name
        from_attribute: pod
        action: insert
      - key: pod
        action: delete

      - key: k8s.pod.uid
        from_attribute: uid
        action: insert
      - key: uid
        action: delete

      - key: sw.k8s.pod.ip
        from_attribute: pod_ip
        action: insert
      - key: pod_ip
        action: delete

      - key: sw.k8s.pod.host.ip
        from_attribute: host_ip
        action: insert
      - key: host_ip
        action: delete

      - key: sw.k8s.pod.createdby.kind
        from_attribute: created_by_kind
        action: insert
      - key: created_by_kind
        action: delete

      - key: sw.k8s.pod.createdby.name
        from_attribute: created_by_name
        action: insert
      - key: created_by_name
        action: delete

      - key: sw.k8s.pod.host.network
        from_attribute: host_network
        action: insert
      - key: host_network
        action: delete

      - key: sw.k8s.pod.priority_class
        from_attribute: priority_class
        action: insert
      - key: priority_class
        action: delete

      # Container
      - key: k8s.container.id
        from_attribute: container_id
        action: insert
      - key: container_id
        action: delete

      - key: k8s.container.name
        from_attribute: container
        action: insert
      - key: container
        action: delete

      - key: k8s.container.image.id
        from_attribute: image_id
        action: insert
      - key: image_id
        action: delete

      - key: k8s.container.image.name
        from_attribute: image
        action: insert
      - key: image
        action: delete

  batch:
    send_batch_size: 8192
    send_batch_max_size: 8192
    timeout: 1s
receivers:
  k8s_events:
  prometheus:
    config:
      scrape_configs:
        - job_name: prometheus
          scrape_interval: ${SCRAPE_INTERVAL}
          metrics_path: "/federate"
          honor_timestamps: false
          params:
            "match[]":
              - "container_cpu_usage_seconds_total"
              - "container_spec_cpu_quota"
              - "container_spec_cpu_period"
              - "container_memory_working_set_bytes"
              - "container_spec_memory_limit_bytes"
              - "container_cpu_cfs_throttled_periods_total"
              - "container_cpu_cfs_periods_total"
              - "kube_node_info"
              - "kube_node_created"
              - "kube_node_status_capacity"
              - "kube_node_status_condition"
              - "kube_pod_created"
              - "kube_pod_info"
              - "kube_pod_start_time"
              - "kube_pod_completion_time"
              - "kube_pod_status_phase"
              - "kube_pod_start_time"
              - "kube_resourcequota"
              - "kube_pod_container_status_restarts_total"
              - "kube_node_status_allocatable"
              - "kube_pod_container_resource_requests"
              - '{__name__=~"kube_pod_container_.*"}'
          static_configs:
            - targets:
                - ${PROMETHEUS_URL}
service:
  extensions:
    - health_check
    - memory_ballast
  pipelines:
    metrics:
      exporters:
        - otlp
      processors:
        - prometheustypeconvert
        - metricstransform/rename
        - metricstransform/preprocessing
        - swmetricstransform
        - cumulativetodelta
        - deltatorate
        - metricstransform/aggregate_rate
        - experimental_metricsgeneration/cluster
        - groupbyattrs/node
        - metricstransform/aggregate_node_level
        - groupbyattrs/pod
        - metricstransform/aggregate_pod_level
        - groupbyattrs/all
        - resource
        - memory_limiter
        - batch
      receivers:
        - prometheus
    logs:
      exporters:
        - otlp
      processors:
        - resource
        - memory_limiter
        - batch
      receivers:
        - k8s_events
  telemetry:
    logs:
      level: "info"
    metrics:
      address: 0.0.0.0:8888
