exporters:
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
extensions:
  file_storage:
{{ toYaml .Values.otel.logs.filestorage | indent 4 }}
  health_check: {}
{{- if .Values.otel.logs.memory_ballast }}
  memory_ballast:
{{ toYaml .Values.otel.logs.memory_ballast | indent 4 }}
{{- end }}
{{- if and .Values.otel.metrics.enabled .Values.otel.metrics.autodiscovery.prometheusEndpoints.enabled }}
  k8s_observer:
    auth_type: serviceAccount
    node: ${NODE_NAME}
    observe_pods: true
    observe_nodes: true
{{- end }}

processors:
  memory_limiter:
{{ toYaml .Values.otel.logs.memory_limiter | indent 4 }}

{{- if .Values.otel.logs.filter }}
  # For more all the options about the filtering see https://github.com/open-telemetry/opentelemetry-collector-contrib/tree/main/processor/filterprocessor
  filter/logs:
    logs:
{{ toYaml .Values.otel.logs.filter | indent 6 }}
{{- end }}

  # Those metrics are generated by Prometheus reciever (https://prometheus.io/docs/concepts/jobs_instances/#automatically-generated-labels-and-time-series)
  filter/receiver:
    metrics:
      exclude:
        match_type: strict
        metric_names:
          - scrape_duration_seconds
          - scrape_samples_post_metric_relabeling
          - scrape_samples_scraped
          - scrape_series_added
          - up

  filter/remove_internal:
    metrics:
      datapoint:
      - 'attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*") == false'

  attributes/remove_prometheus_attributes:    
    actions:
      - key: prometheus
        action: delete
      - key: prometheus_replica
        action: delete

  # unify attributes
  attributes/unify_node_attribute:
    include:
      match_type: regexp
      metric_names:
        - container_.*
    actions:
      - key: k8s.node.name
        from_attribute: node
        action: insert
{{- if not .Values.aws_fargate.enabled }}
      - key: k8s.node.name
        from_attribute: kubernetes_io_hostname
        action: insert
{{- end }}

  transform/unify_node_attribute:
    metric_statements:
      - context: datapoint
        statements:
          # use "service.instance.id" for Node name when the attributes/unify_node_attribute processor failed to provide it
          - set(attributes["k8s.node.name"], resource.attributes["service.instance.id"]) where IsMatch(metric.name, "^(container_.*)$") == true and attributes["k8s.node.name"] == nil

  metricstransform/preprocessing:
    transforms:  
      - include: k8s.container_fs_reads_total
        action: insert
        new_name: k8s.container_fs_reads_total_temp
      - include: k8s.container_fs_writes_total
        action: insert
        new_name: k8s.container_fs_writes_total_temp
      - include: (k8s.container_fs_reads_total_temp|k8s.container_fs_writes_total_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        experimental_match_labels: { "container": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        new_name: k8s.container.fs.iops
        operations:
          - action: aggregate_labels
            label_set:  [container, pod, namespace]
            aggregation_type: sum

      - include: k8s.container_fs_reads_bytes_total
        action: insert
        new_name: k8s.container_fs_reads_bytes_total_temp
      - include: k8s.container_fs_writes_bytes_total
        action: insert
        new_name: k8s.container_fs_writes_bytes_total_temp
      - include: (k8s.container_fs_reads_bytes_total_temp|k8s.container_fs_writes_bytes_total_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        experimental_match_labels: { "container": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        new_name: k8s.container.fs.throughput
        operations:
          - action: aggregate_labels
            label_set:  [container, pod, namespace]
            aggregation_type: sum

      - include: k8s.container_network_receive_bytes_total
        action: insert        
        new_name: k8s.container.network.bytes_received
      - include: k8s.container_network_transmit_bytes_total
        action: insert        
        new_name: k8s.container.network.bytes_transmitted
      - include: k8s.container_cpu_usage_seconds_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "container": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        new_name: k8s.pod.cpu.usage.seconds.rate
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
      - include: k8s.container_cpu_usage_seconds_total
        action: insert
        new_name: k8s.container.cpu.usage.seconds.rate
      - include: k8s.container_memory_working_set_bytes
        action: insert
        match_type: regexp
        experimental_match_labels: { "container": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        new_name: k8s.pod.memory.working_set
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
      - include: k8s.container_network_receive_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.bytes_received
      - include: k8s.container_network_transmit_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.bytes_transmitted
      - include: k8s.container_network_receive_packets_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.packets_received
      - include: k8s.container_network_transmit_packets_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.packets_transmitted
      - include: k8s.container_network_receive_packets_dropped_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.receive_packets_dropped
      - include: k8s.container_network_transmit_packets_dropped_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.network.transmit_packets_dropped
      - include: k8s.container_fs_reads_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.reads.rate
      - include: k8s.container_fs_writes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.writes.rate
      - include: k8s.container_fs_reads_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.reads.bytes.rate
      - include: k8s.container_fs_writes_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.writes.bytes.rate
      - include: k8s.pod.fs.reads.rate
        action: insert
        new_name: k8s.pod.fs.reads.rate_temp
      - include: k8s.pod.fs.writes.rate
        action: insert
        new_name: k8s.pod.fs.writes.rate_temp
      - include: (k8s.pod.fs.reads.rate_temp|k8s.pod.fs.writes.rate_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        operations:
          - action: aggregate_labels
            label_set:  [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.iops
      - include: k8s.pod.fs.reads.bytes.rate
        action: insert
        new_name: k8s.pod.fs.reads.bytes.rate_temp
      - include: k8s.pod.fs.writes.bytes.rate
        action: insert
        new_name: k8s.pod.fs.writes.bytes.rate_temp
      - include: (k8s.pod.fs.reads.bytes.rate_temp|k8s.pod.fs.writes.bytes.rate_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        operations:
          - action: aggregate_labels
            label_set:  [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.throughput
      - include: k8s.container_fs_usage_bytes
        action: insert
        match_type: regexp
        experimental_match_labels: { "k8s.node.name": "\\S+", "pod": "\\S+", "namespace": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [pod, namespace, k8s.node.name]
            aggregation_type: sum
        new_name: k8s.pod.fs.usage.bytes
      # k8s.node.name metrics
      - include: k8s.container_cpu_usage_seconds_total
        action: insert
        experimental_match_labels: { "id": "/" }
        new_name: k8s.node.cpu.usage.seconds.rate
      - include: k8s.container_memory_working_set_bytes
        action: insert
        experimental_match_labels: { "id": "/" }
        new_name: k8s.node.memory.working_set
      - include: k8s.container_network_receive_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.bytes_received
      - include: k8s.container_network_transmit_bytes_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.bytes_transmitted
      - include: k8s.container_network_receive_packets_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.packets_received
      - include: k8s.container_network_transmit_packets_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.packets_transmitted
      - include: k8s.container_network_receive_packets_dropped_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.receive_packets_dropped
      - include: k8s.container_network_transmit_packets_dropped_total
        action: insert
        match_type: regexp
        experimental_match_labels: { "id":"/", "k8s.node.name": "\\S+" }
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.network.transmit_packets_dropped
      - include: k8s.pod.fs.reads.rate
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.reads.rate_temp
      - include: k8s.pod.fs.writes.rate
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.writes.rate_temp
      - include: k8s.pod.fs.reads.bytes.rate
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.reads.bytes.rate_temp
      - include: k8s.pod.fs.writes.bytes.rate
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.writes.bytes.rate_temp
      - include: (k8s.node.fs.reads.rate_temp|k8s.node.fs.writes.rate_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        operations:
          - action: aggregate_labels
            label_set:  [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.iops
      - include: (k8s.node.fs.reads.bytes.rate_temp|k8s.node.fs.writes.bytes.rate_temp)
        match_type: regexp
        action: combine
        submatch_case: lower
        operations:
          - action: aggregate_labels
            label_set:  [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.throughput
      - include: k8s.pod.fs.usage.bytes
        action: insert
        operations:
          - action: aggregate_labels
            label_set: [k8s.node.name]
            aggregation_type: sum
        new_name: k8s.node.fs.usage

  # Remove datapoints of internal k8s containers from "container_network_.+_total" metrics after they were already processed
  # This is a workaround to not create container entities for POD containers
  filter/remove_internal_postprocessing:
    metrics:
      datapoint:
      - 'attributes["container"] == "POD" and IsMatch(metric.name, "container_network_.*|k8s.container.*") == true'

  attributes/remove_temp:
    include:
      match_type: regexp
      metric_names:
        - .*
    actions:
      - key: temp
        pattern: (.*_temp$)|(^\$.*) # attributes starting with $ are result of `combine` operations
        action: delete

  cumulativetodelta:
    include:
      metrics:
        - k8s.node.cpu.usage.seconds.rate
        - k8s.pod.cpu.usage.seconds.rate
        - k8s.container.fs.iops
        - k8s.container.fs.throughput
        - k8s.container.cpu.usage.seconds.rate
        - k8s.container.network.bytes_received
        - k8s.container.network.bytes_transmitted
        - k8s.pod.fs.iops
        - k8s.pod.fs.throughput
        - k8s.pod.fs.reads.rate
        - k8s.pod.fs.writes.rate
        - k8s.pod.fs.reads.bytes.rate
        - k8s.pod.fs.writes.bytes.rate
        - k8s.pod.network.bytes_received
        - k8s.pod.network.bytes_transmitted
        - k8s.pod.network.packets_received
        - k8s.pod.network.packets_transmitted
        - k8s.pod.network.receive_packets_dropped
        - k8s.pod.network.transmit_packets_dropped
        - k8s.node.fs.iops
        - k8s.node.fs.throughput
        - k8s.node.network.bytes_received
        - k8s.node.network.bytes_transmitted
        - k8s.node.network.packets_received
        - k8s.node.network.packets_transmitted
        - k8s.node.network.receive_packets_dropped
        - k8s.node.network.transmit_packets_dropped
      match_type: strict

  deltatorate:
    metrics:
      - k8s.node.cpu.usage.seconds.rate
      - k8s.pod.cpu.usage.seconds.rate
      - k8s.container.fs.iops
      - k8s.container.fs.throughput
      - k8s.container.cpu.usage.seconds.rate
      - k8s.container.network.bytes_received
      - k8s.container.network.bytes_transmitted
      - k8s.pod.fs.iops
      - k8s.pod.fs.throughput
      - k8s.pod.fs.reads.rate
      - k8s.pod.fs.writes.rate
      - k8s.pod.fs.reads.bytes.rate
      - k8s.pod.fs.writes.bytes.rate
      - k8s.pod.network.bytes_received
      - k8s.pod.network.bytes_transmitted
      - k8s.pod.network.packets_received
      - k8s.pod.network.packets_transmitted
      - k8s.pod.network.receive_packets_dropped
      - k8s.pod.network.transmit_packets_dropped
      - k8s.node.fs.iops
      - k8s.node.fs.throughput
      - k8s.node.network.bytes_received
      - k8s.node.network.bytes_transmitted
      - k8s.node.network.packets_received
      - k8s.node.network.packets_transmitted
      - k8s.node.network.receive_packets_dropped
      - k8s.node.network.transmit_packets_dropped

  groupbyattrs/node:
    keys:
      - k8s.node.name

  groupbyattrs/pod:
    keys:
      - namespace
      - pod

  groupbyattrs/all:
    keys:
      - kubelet_version
      - container_runtime_version
      - provider_id
      - os_image
      - namespace
      - uid
      - k8s.pod.uid
      - pod_ip
      - host_ip
      - created_by_kind
      - created_by_name
      - host_network
      - priority_class
      - container_id
      - container
      - image
      - image_id
      - k8s.node.name
      - sw.k8s.pod.status
      - sw.k8s.namespace.status
      - sw.k8s.node.status
      - sw.k8s.container.status
      - sw.k8s.container.init
      - daemonset
      - statefulset
      - deployment
      - replicaset
      - job_name
      - cronjob
      - git_version
      - internal_ip
      - job_condition
      - persistentvolumeclaim
      - persistentvolume
      - sw.k8s.persistentvolumeclaim.status
      - sw.k8s.persistentvolume.status
      - storageclass
      - access_mode
      - k8s.service.name
      - sw.k8s.service.external_name
      - sw.k8s.service.type
      - sw.k8s.cluster.ip

{{- if .Values.otel.metrics.filter }}
  filter/metrics:
    metrics:
{{ toYaml .Values.otel.metrics.filter | indent 6 }}
{{- end }}

  resource/metrics:
    attributes:      
      # Remove useless attributes
      - key: service.name
        action: delete

      - key: service.instance.id
        action: delete

      - key: net.host.name
        action: delete

      - key: net.host.port
        action: delete

      - key: http.scheme
        action: delete

      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.cluster.version
        from_attribute: git_version
        action: insert

      # k8s.node.name
      - key: sw.k8s.node.version
        from_attribute: kubelet_version
        action: insert      

      - key: sw.k8s.node.container.runtime.version
        from_attribute: container_runtime_version
        action: insert      

      - key: sw.k8s.node.provider.id
        from_attribute: provider_id
        action: insert      

      - key: sw.k8s.node.os.image
        from_attribute: os_image
        action: insert
      
      - key: sw.k8s.node.ip.internal
        from_attribute: internal_ip
        action: insert      

      # Namespace
      - key: k8s.namespace.name
        from_attribute: namespace
        action: insert      
      # Pod
      - key: k8s.pod.name
        from_attribute: pod
        action: insert

      - key: sw.k8s.pod.ip
        from_attribute: pod_ip
        action: insert

      - key: sw.k8s.pod.host.ip
        from_attribute: host_ip
        action: insert      

      - key: sw.k8s.pod.createdby.kind
        from_attribute: created_by_kind
        action: insert      

      - key: sw.k8s.pod.createdby.name
        from_attribute: created_by_name
        action: insert      

      - key: sw.k8s.pod.host.network
        from_attribute: host_network
        action: insert      

      - key: sw.k8s.pod.priority_class
        from_attribute: priority_class
        action: insert      

      # Container
      - key: container_id
        action: extract
        pattern: ^(?P<extracted_container_runtime>[^:]+)://(?P<extracted_container_id>[^/]+)$
      - key: container.id
        from_attribute: extracted_container_id
        action: insert      
      - key: container.runtime
        from_attribute: extracted_container_runtime
        action: insert      

      - key: k8s.container.name
        from_attribute: container
        action: insert      

      - key: k8s.container.image.id
        from_attribute: image_id
        action: insert      

      - key: k8s.container.image.name
        from_attribute: image
        action: insert      

      # ReplicaSet
      - key: k8s.replicaset.name
        from_attribute: replicaset
        action: insert      

      # Deployment
      - key: k8s.deployment.name
        from_attribute: deployment
        action: insert      

      # StatefulSet
      - key: k8s.statefulset.name
        from_attribute: statefulset
        action: insert

      # DaemonSet
      - key: k8s.daemonset.name
        from_attribute: daemonset
        action: insert      

      # Job
      - key: k8s.job.name
        from_attribute: job_name
        action: insert      

      - key: k8s.job.condition
        from_attribute: job_condition
        action: insert      

      # CronJob
      - key: k8s.cronjob.name
        from_attribute: cronjob
        action: insert      

      # PersistentVolume
      - key: k8s.persistentvolume.name
        from_attribute: persistentvolume
        action: insert      

      # PersistentVolumeClaim
      - key: k8s.persistentvolumeclaim.name
        from_attribute: persistentvolumeclaim
        action: insert

{{- if not (empty .Values.otel.metrics.k8s_instrumentation.labels.excludePattern) }}
  resource/k8sattributes_labels_filter:
    attributes:
      - action: delete
        pattern: {{ .Values.otel.metrics.k8s_instrumentation.labels.excludePattern }}
{{- end }}
{{- if not (empty .Values.otel.metrics.k8s_instrumentation.annotations.excludePattern) }}
  resource/k8sattributes_annotations_filter:
    attributes:
      - action: delete
        pattern: {{ .Values.otel.metrics.k8s_instrumentation.annotations.excludePattern }}
{{- end }}

  groupbyattrs/common-all:
    keys:
      - k8s.container.name
      - k8s.namespace.name
      - k8s.pod.name
      - k8s.pod.uid
      - host.name
      - service.name

  resource/all:
    attributes:

      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      # Node
      - key: k8s.node.name
        value: ${NODE_NAME}
        action: insert

  resource/container:
    attributes:

      - key: sw.k8s.log.type
        value: container
        action: insert

      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      # Node
      - key: k8s.node.name
        value: ${NODE_NAME}
        action: insert
{{- if and (not .isWindows) .Values.otel.logs.journal }}
  resource/journal:
    attributes:

      - key: sw.k8s.log.type
        value: journal
        action: insert

      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      # Node
      - key: k8s.node.name
        value: ${NODE_NAME}
        action: insert
{{- end }}
  transform/syslogify:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          - set( attributes["host.name"], attributes["k8s.pod.name"])
          - set( attributes["service.name"], attributes["k8s.container.name"])

  batch/logs:
{{ toYaml .Values.otel.logs.batch | indent 4 }}

  batch/metrics:
{{ toYaml .Values.otel.metrics.batch | indent 4 }}

  k8sattributes:
    auth_type: "serviceAccount"
    passthrough: false
    filter:
      node_from_env_var: NODE_NAME
    extract:
      metadata:
        - k8s.deployment.name
        - k8s.replicaset.name
        - k8s.daemonset.name
        - k8s.job.name
        - k8s.cronjob.name
        - k8s.statefulset.name
      labels:
        - key_regex: (.*)
          tag_name: k8s.pod.labels.$$1
          from: pod
        - key_regex: (.*)
          tag_name: k8s.namespace.labels.$$1
          from: namespace
      annotations:
        - key_regex: (.*)
          tag_name: k8s.pod.annotations.$$1
          from: pod
        - key_regex: (.*)
          tag_name: k8s.namespace.annotations.$$1
          from: namespace
    pod_association:
      - sources:
          - from: resource_attribute
            name: k8s.pod.name
          - from: resource_attribute
            name: k8s.namespace.name

  metricstransform/rename:
    transforms:
      # add `k8s.` prefix to all metrics
      - include: ^(.*)$$
        match_type: regexp
        action: update
        new_name: k8s.$${1}

{{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.customTransformations.counterToRate }}
  cumulativetodelta:
    include:
      metrics:
{{- range .Values.otel.metrics.autodiscovery.prometheusEndpoints.customTransformations.counterToRate }}
        - {{ . }}
{{- end }}
      match_type: strict
  deltatorate:
    metrics:
{{- range .Values.otel.metrics.autodiscovery.prometheusEndpoints.customTransformations.counterToRate }}
      - {{ . }}
{{- end }}
{{- end }}

{{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.filter }}
  filter/metrics-discovery:
    metrics:
{{ toYaml .Values.otel.metrics.autodiscovery.prometheusEndpoints.filter | indent 6 }}
{{- end }}

connectors:
{{- if .Values.otel.metrics.enabled }}
  forward/metric-exporter:
{{- end }}
{{- if and .Values.otel.logs.enabled (or .Values.otel.logs.container (and (not .isWindows) .Values.otel.logs.journal))}}
  forward/logs-exporter:
{{- end }}

receivers:
{{- if and (not .isWindows) .Values.otel.logs.journal }}
  journald/runlogs:
    directory: /run/log/journal
    units:
      - kubelet
      - docker
      - containerd
  journald/varlogs:
    directory: /var/log/journal
    units:
      - kubelet
      - docker
      - containerd
{{- end}}
  filelog:
{{- if (.isWindows) }}
    include: [ "\\var\\log\\pods\\*\\*\\*.log" ]
    exclude: [ "\\var\\log\\pods\\${POD_NAMESPACE}_${POD_NAME}*_*\\swi-opentelemetry-collector\\*.log" ]
{{- else }}
    include: [ "/var/log/pods/*/*/*.log" ]
    # Exclude collector container's logs. The file format is /var/log/pods/<namespace_name>_<pod_name>_<pod_uid>/<container_name>/<run_id>.log    
    exclude: [ "/var/log/pods/${POD_NAMESPACE}_${POD_NAME}*_*/swi-opentelemetry-collector/*.log" ]
{{- end }}
    start_at: {{ .Values.otel.logs.receiver.start_at }}
    include_file_path: true
    include_file_name: false
    storage: file_storage
    max_log_size: {{ .Values.otel.logs.receiver.max_log_size }}
    max_concurrent_files: {{ .Values.otel.logs.receiver.max_concurrent_files }}
    fingerprint_size: {{ .Values.otel.logs.receiver.fingerprint_size }}
    encoding: {{ .Values.otel.logs.receiver.encoding }}
    poll_interval: {{ .Values.otel.logs.receiver.poll_interval }}
    operators:
      # Find out which format is used by kubernetes
      - type: router
        id: get-format
        routes:
          - output: parser-docker
            expr: 'body matches "^\\{"'
          - output: parser-crio
            expr: 'body matches "^[^ Z]+ "'
          - output: parser-containerd
            expr: 'body matches "^[^ Z]+Z"'
      # Parse CRI-O format
      - type: regex_parser
        id: parser-crio
        regex: '^(?P<time>[^ Z]+) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)( |)(?P<log>.*)$'
        output: merge-cri-lines
        parse_to: body
        timestamp:
          parse_from: body.time
          layout_type: gotime
          layout: '2006-01-02T15:04:05.999999999-07:00'
      # Parse CRI-Containerd format
      - type: regex_parser
        id: parser-containerd
        regex: '^(?P<time>[^ ^Z]+Z) (?P<stream>stdout|stderr) (?P<logtag>[^ ]*)( |)(?P<log>.*)$'
        output: merge-cri-lines
        parse_to: body
        timestamp:
          parse_from: body.time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'
      # Parse Docker format
      - type: json_parser
        id: parser-docker
        parse_to: body
        output: merge-docker-lines
        timestamp:
          parse_from: body.time
          layout: '%Y-%m-%dT%H:%M:%S.%LZ'

      # Merge log lines split by Docker logging driver.
      - type: recombine
        id: merge-docker-lines
        source_identifier: attributes["log.file.path"]
        output: merge-multiline-logs
        combine_field: body.log
        combine_with: ""
        is_last_entry: body.log matches "\n$"

      # Merge log lines split by CRI logging drivers.
      - type: recombine
        id: merge-cri-lines
        source_identifier: attributes["log.file.path"]
        output: merge-multiline-logs
        combine_field: body.log
        combine_with: ""
        is_last_entry: body.logtag == "F"
        overwrite_with: newest

      # Merges incoming log records into multiline logs.
      - type: recombine
        id: merge-multiline-logs
        output: extract-metadata-from-filepath
        source_identifier: attributes["log.file.path"]
        combine_field: body.log
        combine_with: ""
        is_first_entry: body.log matches "^\\[?\\d{4}-\\d{1,2}-\\d{1,2}.\\d{2}:\\d{2}:\\d{2}.*"

      # Extract metadata from file path
      - type: regex_parser
        id: extract-metadata-from-filepath
{{- if (.isWindows) }}
        regex: '^.*\\(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\\(?P<container_name>[^\._]+)\\(?P<run_id>\d+)\.log$'
{{- else }}
        regex:  '^.*\/(?P<namespace>[^_]+)_(?P<pod_name>[^_]+)_(?P<uid>[a-f0-9\-]+)\/(?P<container_name>[^\._]+)\/(?P<run_id>\d+)\.log$'
{{- end }}
        parse_from: attributes["log.file.path"]

      # Rename attributes
      - type: move
        id: move-attributes
        from: body.stream
        to: attributes["stream"]
      - type: move
        from: attributes.container_name
        to: attributes["k8s.container.name"]
      - type: move
        from: attributes.namespace
        to: attributes["k8s.namespace.name"]
      - type: move
        from: attributes.pod_name
        to: attributes["k8s.pod.name"]
      - type: remove
        field: attributes.run_id
      - type: move
        from: attributes.uid
        to: attributes["k8s.pod.uid"]
      - type: remove
        field: attributes["log.file.path"]
      - type: remove
        field: body.time
      - type: move
        from: body.log
        to: body

{{- if and .Values.otel.metrics.enabled .Values.otel.metrics.autodiscovery.prometheusEndpoints.enabled }}
  receiver_creator/discovery:
    watch_observers: 
      - k8s_observer
    receivers:
      prometheus/discovery:
        {{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true" && {{ .Values.otel.metrics.autodiscovery.prometheusEndpoints.additionalRules }}
        {{- else }}
        rule: type == "pod" && annotations["prometheus.io/scrape"] == "true"
        {{- end }} 
        config:
          config:
            scrape_configs:
              - job_name: pod
                scheme: "http"
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                metrics_path: '`"prometheus.io/path" in annotations ? annotations["prometheus.io/path"] : "/metrics"`'
                honor_timestamps: false
                honor_labels: true
                static_configs:
                  - targets:
                      - '`endpoint`:`"prometheus.io/port" in annotations ? annotations["prometheus.io/port"] : 9090`'
{{- end }}

  receiver_creator/node:
    watch_observers: 
      - k8s_observer
    receivers:
      prometheus/node:
        rule: type == "k8s.node"
        config:
          config:
            scrape_configs:
              - job_name: 'kubernetes-nodes-cadvisor'
                scheme: "https"
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                scrape_timeout: 10s
                metrics_path: "/metrics/cadvisor"
                honor_timestamps: false
                honor_labels: true
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
                bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                static_configs:
                  - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'
              - job_name: 'kubernetes-nodes'
                scheme: "https"
                scrape_interval: {{ quote .Values.otel.metrics.prometheus.scrape_interval }}
                scrape_timeout: 10s
                metrics_path: "/metrics"
                honor_timestamps: false
                honor_labels: true
                tls_config:
                  ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
                  insecure_skip_verify: true
                bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
                static_configs:
                  - targets:
                      - '`endpoint`:`kubelet_endpoint_port`'

service:
  extensions:
    - file_storage
    - health_check
{{- if .Values.otel.logs.memory_ballast }}
    - memory_ballast
{{- end}}
{{- if and .Values.otel.metrics.enabled .Values.otel.metrics.autodiscovery.prometheusEndpoints.enabled }}
    - k8s_observer
{{- end}}
  pipelines:
{{- if and .Values.otel.logs.enabled (or .Values.otel.logs.container (and (not .isWindows) .Values.otel.logs.journal))}}
{{- if .Values.otel.logs.container }}
    logs/container:
      exporters:
        - forward/logs-exporter
      processors:
        - memory_limiter
{{- if .Values.otel.logs.filter }}
        - filter/logs
{{- end }}
        - transform/syslogify
        - groupbyattrs/common-all
        - resource/container
      receivers:
        - filelog
{{- end }}
{{- if and (not .isWindows) .Values.otel.logs.journal }}
    logs/journal:
      exporters:
        - forward/logs-exporter
      processors:
        - memory_limiter
        - groupbyattrs/common-all
        - resource/journal
      receivers:
        - journald/runlogs
        - journald/varlogs
{{- end }}

    logs:
      exporters:
        - otlp
      processors:
        - memory_limiter
        - batch/logs
      receivers:
        - forward/logs-exporter
{{- end }}

{{- if and .Values.otel.metrics.enabled .Values.otel.metrics.autodiscovery.prometheusEndpoints.enabled }}
    metrics/discovery:
      exporters:
        - forward/metric-exporter
      processors:
        - memory_limiter
{{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.filter }}
        - filter/metrics-discovery
{{- end }}
        - metricstransform/rename
{{- if .Values.otel.metrics.autodiscovery.prometheusEndpoints.customTransformations.counterToRate }}
        - cumulativetodelta
        - deltatorate
{{- end }}
        - groupbyattrs/common-all
        - resource/all
      receivers:
        - receiver_creator/discovery
{{- end }}
{{- if .Values.otel.metrics.enabled }}
    metrics/node:
      exporters:
        - forward/metric-exporter
      processors:
        - memory_limiter
        - filter/receiver
        - filter/remove_internal        
        - attributes/remove_prometheus_attributes
        - attributes/unify_node_attribute
        - transform/unify_node_attribute   
        - metricstransform/rename
        - metricstransform/preprocessing
        - filter/remove_internal_postprocessing
        - attributes/remove_temp
        - cumulativetodelta
        - deltatorate
        - groupbyattrs/node
        - groupbyattrs/pod
        - groupbyattrs/all
{{- if .Values.otel.metrics.filter }}
        - filter/metrics
{{- end }}
        - resource/metrics
      receivers:
        - receiver_creator/node
    metrics:
      exporters:
        - otlp
      processors:
        - memory_limiter
        - k8sattributes
{{- if not (empty .Values.otel.metrics.k8s_instrumentation.labels.excludePattern) }}
        - resource/k8sattributes_labels_filter
{{- end }}
{{- if not (empty .Values.otel.metrics.k8s_instrumentation.annotations.excludePattern) }}
        - resource/k8sattributes_annotations_filter
{{- end }}
        - batch
      receivers:
        - forward/metric-exporter
{{- end }}
  telemetry:
{{- if .Values.otel.logs.telemetry.logs.enabled }}
    logs:
      level: {{ .Values.otel.logs.telemetry.logs.level }}
{{- end }}
{{- if .Values.otel.logs.telemetry.metrics.enabled }}
    metrics:
      address: {{ .Values.otel.logs.telemetry.metrics.address }}
{{- end }}
