exporters:
  otlp:
    endpoint: ${OTEL_ENVOY_ADDRESS}
    tls:
      insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
    headers:
      "Authorization": "Bearer ${SOLARWINDS_API_TOKEN}"
    retry_on_failure:
      enabled: {{ .Values.otel.events.retry_on_failure.enabled }}
      initial_interval: {{ .Values.otel.events.retry_on_failure.initial_interval }}
      max_interval: {{ .Values.otel.events.retry_on_failure.max_interval }}
      max_elapsed_time: {{ .Values.otel.events.retry_on_failure.max_elapsed_time }}
    sending_queue:
      enabled: {{ .Values.otel.events.sending_queue.enabled }}
      num_consumers: {{ .Values.otel.events.sending_queue.num_consumers }}
      queue_size: {{ .Values.otel.events.sending_queue.queue_size }}
{{- if .Values.otel.events.sending_queue.offload_to_disk }}
      storage: file_storage/sending_queue
    timeout: {{ .Values.otel.events.timeout }}
{{- end }}
extensions:
{{- if .Values.otel.events.sending_queue.offload_to_disk }}
  file_storage/sending_queue:
    directory: /var/lib/swo/sending_queue
{{- end }}
  health_check:
    endpoint: 0.0.0.0:13133

processors:
  memory_limiter:
{{ toYaml .Values.otel.events.memory_limiter | indent 4 }}

{{- if .Values.otel.events.filter }}
  filter:
    logs:
{{ toYaml .Values.otel.events.filter | indent 6 }}
{{- end }}
{{- if .Values.otel.manifests.filter }}
  filter/manifests:
    logs:
{{ toYaml .Values.otel.manifests.filter | indent 6 }}
{{- end }}
  transform/severity:
    log_statements:
      - context: log
        statements:
          - set(severity_text, "Error") where
{{ include "common.events-error-conditions" . | indent 16}}
          - set(severity_number, 17) where
{{ include "common.events-error-conditions" . | indent 16}}

          - set(severity_text, "Warning") where
{{ include "common.events-warning-conditions" . | indent 16}}
          - set(severity_number, 13) where
{{ include "common.events-warning-conditions" . | indent 16}}
  transform/namespace:
    log_statements:
      - context: log
        statements:
          - set(attributes["sw.namespace"], "sw.events.inframon.k8s")
  transform/entity_attributes:
    log_statements:
      - context: log
        statements:
          - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Pod"
          - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Deployment"
          - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "StatefulSet"
          - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "ReplicaSet"
          - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "DaemonSet"
          - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Job"
          - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "CronJob"
          - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"]) where resource.attributes["k8s.object.kind"] == "Node"
          - set(resource.attributes["k8s.namespace.name"], attributes["k8s.namespace.name"]) where attributes["k8s.namespace.name"] != nil
          - delete_key(attributes, "k8s.namespace.name") where attributes["k8s.namespace.name"] != nil
  transform/cleanup_attributes_for_nonexisting_entities:
    log_statements:
      - context: log
        statements:
          - delete_key(resource.attributes, "k8s.pod.name") where resource.attributes["sw.k8s.pod.found"] == "false"
          - delete_key(resource.attributes, "k8s.deployment.name") where resource.attributes["sw.k8s.deployment.found"] == "false"
          - delete_key(resource.attributes, "k8s.statefulset.name") where resource.attributes["sw.k8s.statefulset.found"] == "false"
          - delete_key(resource.attributes, "k8s.replicaset.name") where resource.attributes["sw.k8s.replicaset.found"] == "false"
          - delete_key(resource.attributes, "k8s.daemonset.name") where resource.attributes["sw.k8s.daemonset.found"] == "false"
          - delete_key(resource.attributes, "k8s.job.name") where resource.attributes["sw.k8s.job.found"] == "false"
          - delete_key(resource.attributes, "k8s.cronjob.name") where resource.attributes["sw.k8s.cronjob.found"] == "false"
          - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"] == "false"
          - delete_key(resource.attributes, "sw.k8s.pod.found")
          - delete_key(resource.attributes, "sw.k8s.deployment.found")
          - delete_key(resource.attributes, "sw.k8s.statefulset.found")
          - delete_key(resource.attributes, "sw.k8s.replicaset.found")
          - delete_key(resource.attributes, "sw.k8s.daemonset.found")
          - delete_key(resource.attributes, "sw.k8s.job.found")
          - delete_key(resource.attributes, "sw.k8s.cronjob.found")
          - delete_key(resource.attributes, "sw.k8s.node.found")
{{- if .Values.otel.manifests.enabled }}
  transform/manifest:
      error_mode: ignore
      log_statements:
        - context: log
          statements:
            # set event namespace where it will be stored in SWO.
            - set(attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            
            # Add new attribute `watch-type` with type of the change - "ADDED", "MODIFIED", "DELETED"
            - set(attributes["watch.type"], body["type"]) where IsMap(body) and body["type"] != nil

            # in watch mode body has `object` attribute with the manifest, in pull mode body is the manifest
            # flaten body structure to have only raw manifest in body in all the cases
            - set(body, body["object"]) where IsMap(body) and body["object"] != nil

            # set attributes for the resource
            - set(attributes["k8s.pod.name"], body["metadata"]["name"]) where body["kind"] == "Pod"
            - set(attributes["k8s.deployment.name"], body["metadata"]["name"]) where body["kind"] == "Deployment"
            - set(attributes["k8s.statefulset.name"], body["metadata"]["name"]) where body["kind"] == "StatefulSet"
            - set(attributes["k8s.replicaset.name"], body["metadata"]["name"]) where body["kind"] == "ReplicaSet"
            - set(attributes["k8s.daemonset.name"], body["metadata"]["name"]) where body["kind"] == "DaemonSet"
            - set(attributes["k8s.job.name"], body["metadata"]["name"]) where body["kind"] == "Job"
            - set(attributes["k8s.cronjob.name"], body["metadata"]["name"]) where body["kind"] == "CronJob"
            - set(attributes["k8s.node.name"], body["metadata"]["name"]) where body["kind"] == "Node"
            - set(attributes["k8s.service.name"], body["metadata"]["name"]) where body["kind"] == "Service"
            - set(attributes["k8s.persistentvolume.name"], body["metadata"]["name"]) where body["kind"] == "PersistentVolume"
            - set(attributes["k8s.persistentvolumeclaim.name"], body["metadata"]["name"]) where body["kind"] == "PersistentVolumeClaim"
            - set(attributes["k8s.namespace.name"], body["metadata"]["namespace"])
            - set(attributes["k8s.ingress.name"], body["metadata"]["name"]) where body["kind"] == "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["k8s.ingress.type"], body["kind"]) where body["kind"] == "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["k8s.object.kind"], body["kind"]) where body["kind"] != nil

            # There are some attributes added by k8sobjects receiver, SWO do not need them so removing it
            - delete_key(attributes, "k8s.resource.name")
            - delete_key(attributes, "event.name")
            - delete_key(attributes, "event.domain")

            # convert body to string
            - set(body, body.string)
{{- end }}
{{- if .Values.otel.manifests.enabled }}
  groupbyattrs/manifest:
    keys:
      - k8s.pod.name
      - k8s.deployment.name
      - k8s.statefulset.name
      - k8s.replicaset.name
      - k8s.daemonset.name
      - k8s.job.name
      - k8s.cronjob.name
      - k8s.node.name
      - k8s.namespace.name
      - k8s.service.name
      - k8s.persistentvolume.name
      - k8s.persistentvolumeclaim.name
      - k8s.ingress.name
{{- end }}

  resource/events:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.log.type
        value: event
        action: insert
{{- if .Values.otel.manifests.enabled }}
  resource/manifest:
    attributes:
      # Collector and Manifest version
      - key: sw.k8s.agent.manifest.version
        value: ${MANIFEST_VERSION}
        action: insert

      - key: sw.k8s.agent.app.version
        value: ${APP_VERSION}
        action: insert

      # Cluster
      - key: sw.k8s.cluster.uid
        value: ${CLUSTER_UID}
        action: insert

      - key: k8s.cluster.name
        value: ${CLUSTER_NAME}
        action: insert

      - key: sw.k8s.log.type
        value: manifest
        action: insert
{{- end }}
  batch:
{{ toYaml .Values.otel.events.batch | indent 4 }}
  swk8sattributes:
{{ include "common.k8s-instrumentation" (tuple . .Values.otel.events.k8s_instrumentation.annotations.enabled .Values.otel.events.k8s_instrumentation.labels.enabled "true") | indent 4 }}
{{- if not (empty .Values.otel.events.k8s_instrumentation.labels.excludePattern) }}
  resource/swk8sattributes_labels_filter:
    attributes:
      - action: delete
        pattern: {{ .Values.otel.events.k8s_instrumentation.labels.excludePattern }}
{{- end }}
{{- if not (empty .Values.otel.events.k8s_instrumentation.annotations.excludePattern) }}
  resource/swk8sattributes_annotations_filter:
    attributes:
      - action: delete
        pattern: {{ .Values.otel.events.k8s_instrumentation.annotations.excludePattern }}
{{- end }}

receivers:
  k8s_events:
{{- if .Values.otel.manifests.enabled }}
  k8sobjects:
    auth_type: serviceAccount
    objects:
{{- $arrayOfWatchedResources := list 
  "pods" 
  "deployments" 
  "statefulsets" 
  "replicasets" 
  "daemonsets" 
  "jobs" 
  "cronjobs" 
  "nodes" 
  "services"
  "persistentvolumes"
  "persistentvolumeclaims"
  "ingresses"
}}
{{- $root := . }}
{{- range $index, $resource := $arrayOfWatchedResources }}
      - name: {{ $resource }}
        mode: pull
        interval: {{ quote $root.Values.otel.manifests.pull_every }}
      - name : {{ $resource }}
        mode: watch
{{- end }}
{{- end }}
service:
  extensions:
{{- if .Values.otel.events.sending_queue.offload_to_disk }}
    - file_storage/sending_queue
{{- end}}
    - health_check
  pipelines:
{{- if .Values.otel.events.enabled }}
    logs:
      exporters:
        - otlp
      processors:
        - memory_limiter
{{- if and .Values.otel.events.filter (eq (include "isDeprecatedFilterSyntax" .Values.otel.events.filter) "true") }}
        - filter
{{- end }}
        - transform/severity
        - transform/namespace
        - transform/entity_attributes
        - resource/events
        - swk8sattributes
{{- if not (empty .Values.otel.events.k8s_instrumentation.labels.excludePattern) }}
        - resource/swk8sattributes_labels_filter
{{- end }}
{{- if not (empty .Values.otel.events.k8s_instrumentation.annotations.excludePattern) }}
        - resource/swk8sattributes_annotations_filter
{{- end }}
        - transform/cleanup_attributes_for_nonexisting_entities
{{- if and .Values.otel.events.filter (eq (include "isDeprecatedFilterSyntax" .Values.otel.events.filter) "false") }}
        - filter
{{- end }}
        - batch
      receivers:
        - k8s_events
{{- end }}
{{- if .Values.otel.manifests.enabled }}
    logs/manifests:
      exporters:
        - otlp
      processors:
        - memory_limiter
        - transform/manifest
        - groupbyattrs/manifest
        - resource/manifest
        - swk8sattributes
{{- if not (empty .Values.otel.events.k8s_instrumentation.labels.excludePattern) }}
        - resource/k8sattributes_labels_filter
{{- end }}
{{- if not (empty .Values.otel.events.k8s_instrumentation.annotations.excludePattern) }}
        - resource/k8sattributes_annotations_filter
{{- end }}
        - transform/cleanup_attributes_for_nonexisting_entities
{{- if .Values.otel.manifests.filter }}
        - filter/manifests
{{- end }}
        - batch
      receivers:
        - k8sobjects
{{- end }}
  telemetry:
{{- if .Values.otel.events.telemetry.logs.enabled }}
    logs:
      level: {{ .Values.otel.events.telemetry.logs.level }}
{{- end }}
{{- if .Values.otel.events.telemetry.metrics.enabled }}
    metrics:
      address: {{ .Values.otel.events.telemetry.metrics.address }}
{{- end }}