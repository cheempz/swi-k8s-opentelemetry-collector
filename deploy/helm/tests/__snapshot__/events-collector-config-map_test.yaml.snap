Custom events filter with new syntax:
  1: |
    events.config: |-
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 10
            queue_size: 1000
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        batch:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        filter:
          logs:
            log_record:
            - not(IsMatch(resource.attributes["k8s.namespace.name"], "^.*$"))
        groupbyattrs/manifest:
          keys:
          - k8s.pod.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.replicaset.name
          - k8s.daemonset.name
          - k8s.job.name
          - k8s.cronjob.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.service.name
          - k8s.persistentvolume.name
          - k8s.persistentvolumeclaim.name
          - k8s.ingress.name
          - sw.k8s.ingress.type
          - k8s.configmap.name
        memory_limiter:
          check_interval: 1s
          limit_mib: 512
          spike_limit_mib: 128
        resource/events:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: event
        resource/manifest:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: manifest
        swk8sattributes:
          auth_type: serviceAccount
          cronjob:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.cronjob.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: cronjob
                key_regex: (.*)
                tag_name: k8s.cronjob.labels.$$1
          daemonset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.daemonset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: daemonset
                key_regex: (.*)
                tag_name: k8s.daemonset.labels.$$1
          deployment:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.deployment.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: deployment
                key_regex: (.*)
                tag_name: k8s.deployment.labels.$$1
          extract:
            labels:
            - from: pod
              key_regex: (.*)
              tag_name: k8s.pod.labels.$$1
            - from: namespace
              key_regex: (.*)
              tag_name: k8s.namespace.labels.$$1
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          job:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.job.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: job
                key_regex: (.*)
                tag_name: k8s.job.labels.$$1
          node:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.node.name
            extract:
              labels:
              - from: node
                key_regex: (.*)
                tag_name: k8s.node.labels.$$1
          passthrough: false
          persistentvolume:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolume.name
            extract:
              labels:
              - from: persistentvolume
                key_regex: (.*)
                tag_name: k8s.persistentvolume.labels.$$1
          persistentvolumeclaim:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolumeclaim.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: persistentvolumeclaim
                key_regex: (.*)
                tag_name: k8s.persistentvolumeclaim.labels.$$1
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          replicaset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.replicaset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: replicaset
                key_regex: (.*)
                tag_name: k8s.replicaset.labels.$$1
          service:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.service.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: service
                key_regex: (.*)
                tag_name: k8s.service.labels.$$1
          set_object_existence: true
          statefulset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.statefulset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: statefulset
                key_regex: (.*)
                tag_name: k8s.statefulset.labels.$$1
        transform/cleanup_attributes_for_nonexisting_entities:
          log_statements:
          - context: log
            statements:
            - delete_key(resource.attributes, "k8s.pod.name") where resource.attributes["sw.k8s.pod.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.deployment.name") where resource.attributes["sw.k8s.deployment.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.statefulset.name") where resource.attributes["sw.k8s.statefulset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.replicaset.name") where resource.attributes["sw.k8s.replicaset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.daemonset.name") where resource.attributes["sw.k8s.daemonset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.job.name") where resource.attributes["sw.k8s.job.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.cronjob.name") where resource.attributes["sw.k8s.cronjob.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"]
              == "false"
            - delete_key(resource.attributes, "sw.k8s.pod.found")
            - delete_key(resource.attributes, "sw.k8s.deployment.found")
            - delete_key(resource.attributes, "sw.k8s.statefulset.found")
            - delete_key(resource.attributes, "sw.k8s.replicaset.found")
            - delete_key(resource.attributes, "sw.k8s.daemonset.found")
            - delete_key(resource.attributes, "sw.k8s.job.found")
            - delete_key(resource.attributes, "sw.k8s.cronjob.found")
            - delete_key(resource.attributes, "sw.k8s.node.found")
        transform/entity_attributes:
          log_statements:
          - context: log
            statements:
            - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Pod"
            - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Deployment"
            - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "StatefulSet"
            - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "ReplicaSet"
            - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "DaemonSet"
            - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Job"
            - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "CronJob"
            - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Node"
            - set(resource.attributes["k8s.namespace.name"], attributes["k8s.namespace.name"])
              where attributes["k8s.namespace.name"] != nil
            - delete_key(attributes, "k8s.namespace.name") where attributes["k8s.namespace.name"]
              != nil
        transform/manifest:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - set(attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            - set(attributes["watch.type"], body["type"]) where IsMap(body) and body["type"]
              != nil
            - set(body, body["object"]) where IsMap(body) and body["object"] != nil
            - set(attributes["k8s.pod.name"], body["metadata"]["name"]) where body["kind"]
              == "Pod"
            - set(attributes["k8s.deployment.name"], body["metadata"]["name"]) where body["kind"]
              == "Deployment"
            - set(attributes["k8s.statefulset.name"], body["metadata"]["name"]) where body["kind"]
              == "StatefulSet"
            - set(attributes["k8s.replicaset.name"], body["metadata"]["name"]) where body["kind"]
              == "ReplicaSet"
            - set(attributes["k8s.daemonset.name"], body["metadata"]["name"]) where body["kind"]
              == "DaemonSet"
            - set(attributes["k8s.job.name"], body["metadata"]["name"]) where body["kind"]
              == "Job"
            - set(attributes["k8s.cronjob.name"], body["metadata"]["name"]) where body["kind"]
              == "CronJob"
            - set(attributes["k8s.node.name"], body["metadata"]["name"]) where body["kind"]
              == "Node"
            - set(attributes["k8s.service.name"], body["metadata"]["name"]) where body["kind"]
              == "Service"
            - set(attributes["k8s.persistentvolume.name"], body["metadata"]["name"]) where
              body["kind"] == "PersistentVolume"
            - set(attributes["k8s.persistentvolumeclaim.name"], body["metadata"]["name"])
              where body["kind"] == "PersistentVolumeClaim"
            - set(attributes["k8s.namespace.name"], body["metadata"]["namespace"])
            - set(attributes["k8s.ingress.name"], body["metadata"]["name"]) where body["kind"]
              == "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["sw.k8s.ingress.type"], body["kind"]) where body["kind"] ==
              "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["k8s.configmap.name"], body["metadata"]["name"]) where body["kind"]
              == "ConfigMap"
            - set(attributes["k8s.object.kind"], body["kind"]) where body["kind"] != nil
            - delete_key(attributes, "k8s.resource.name")
            - delete_key(attributes, "event.name")
            - delete_key(attributes, "event.domain")
        transform/namespace:
          log_statements:
          - context: log
            statements:
            - set(attributes["sw.namespace"], "sw.events.inframon.k8s")
        transform/scope:
          log_statements:
          - context: scope
            statements:
            - set(name, "")
            - set(version, "")
        transform/set_labels_and_annotations_for_entities:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - flatten(body["metadata"]["annotations"], "k8s.pod.annotations") where body["kind"]
              == "Pod"
            - flatten(body["metadata"]["annotations"], "k8s.deployment.annotations") where
              body["kind"] == "Deployment"
            - flatten(body["metadata"]["annotations"], "k8s.statefulset.annotations") where
              body["kind"] == "StatefulSet"
            - flatten(body["metadata"]["annotations"], "k8s.replicaset.annotations") where
              body["kind"] == "ReplicaSet"
            - flatten(body["metadata"]["annotations"], "k8s.daemonset.annotations") where
              body["kind"] == "DaemonSet"
            - flatten(body["metadata"]["annotations"], "k8s.job.annotations") where body["kind"]
              == "Job"
            - flatten(body["metadata"]["annotations"], "k8s.cronjob.annotations") where
              body["kind"] == "CronJob"
            - flatten(body["metadata"]["annotations"], "k8s.node.annotations") where body["kind"]
              == "Node"
            - flatten(body["metadata"]["annotations"], "k8s.service.annotations") where
              body["kind"] == "Service"
            - flatten(body["metadata"]["annotations"], "k8s.persistentvolume.annotations")
              where body["kind"] == "PersistentVolume"
            - flatten(body["metadata"]["annotations"], "k8s.persistentvolumeclaim.annotations")
              where body["kind"] == "PersistentVolumeClaim"
            - flatten(body["metadata"]["annotations"], "k8s.ingress.annotations") where
              body["kind"] == "Ingress"
            - flatten(body["metadata"]["annotations"], "k8s.configmap.annotations") where
              body["kind"] == "ConfigMap"
            - merge_maps(resource.attributes, body["metadata"]["annotations"], "upsert")
              where body["kind"] == "Pod" or body["kind"] == "Deployment" or body["kind"]
              == "StatefulSet" or body["kind"] == "ReplicaSet" or body["kind"] == "DaemonSet"
              or body["kind"] == "Job" or body["kind"] == "CronJob" or body["kind"] == "Node"
              or body["kind"] == "Service" or body["kind"] == "PersistentVolume" or body["kind"]
              == "PersistentVolumeClaim" or body["kind"] == "Ingress" or body["kind"] ==
              "ConfigMap"
            - flatten(body["metadata"]["labels"], "k8s.pod.labels") where body["kind"] ==
              "Pod"
            - flatten(body["metadata"]["labels"], "k8s.deployment.labels") where body["kind"]
              == "Deployment"
            - flatten(body["metadata"]["labels"], "k8s.statefulset.labels") where body["kind"]
              == "StatefulSet"
            - flatten(body["metadata"]["labels"], "k8s.replicaset.labels") where body["kind"]
              == "ReplicaSet"
            - flatten(body["metadata"]["labels"], "k8s.daemonset.labels") where body["kind"]
              == "DaemonSet"
            - flatten(body["metadata"]["labels"], "k8s.job.labels") where body["kind"] ==
              "Job"
            - flatten(body["metadata"]["labels"], "k8s.cronjob.labels") where body["kind"]
              == "CronJob"
            - flatten(body["metadata"]["labels"], "k8s.node.labels") where body["kind"]
              == "Node"
            - flatten(body["metadata"]["labels"], "k8s.service.labels") where body["kind"]
              == "Service"
            - flatten(body["metadata"]["labels"], "k8s.persistentvolume.labels") where body["kind"]
              == "PersistentVolume"
            - flatten(body["metadata"]["labels"], "k8s.persistentvolumeclaim.labels") where
              body["kind"] == "PersistentVolumeClaim"
            - flatten(body["metadata"]["labels"], "k8s.ingress.labels") where body["kind"]
              == "Ingress"
            - flatten(body["metadata"]["labels"], "k8s.configmap.labels") where body["kind"]
              == "ConfigMap"
            - merge_maps(resource.attributes, body["metadata"]["labels"], "upsert") where
              body["kind"] == "Pod" or body["kind"] == "Deployment" or body["kind"] == "StatefulSet"
              or body["kind"] == "ReplicaSet" or body["kind"] == "DaemonSet" or body["kind"]
              == "Job" or body["kind"] == "CronJob" or body["kind"] == "Node" or body["kind"]
              == "Service" or body["kind"] == "PersistentVolume" or body["kind"] == "PersistentVolumeClaim"
              or body["kind"] == "Ingress" or body["kind"] == "ConfigMap"
        transform/severity:
          log_statements:
          - context: log
            statements:
            - set(severity_text, "Error") where attributes["k8s.event.reason"] == "Failed"
              or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
              == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
              == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
              == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
              == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
              or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
              "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
              attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
              or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
              == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(severity_number, 17) where attributes["k8s.event.reason"] == "Failed"
              or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
              == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
              == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
              == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
              == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
              or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
              "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
              attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
              or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
              == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(severity_text, "Warning") where attributes["k8s.event.reason"] == "ProbeWarning"
              or attributes["k8s.event.reason"] == "Unhealthy"
            - set(severity_number, 13) where attributes["k8s.event.reason"] == "ProbeWarning"
              or attributes["k8s.event.reason"] == "Unhealthy"
        transform/stringify_body:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - set(body, body.string)
      receivers:
        k8s_events: null
        k8sobjects:
          auth_type: serviceAccount
          objects:
          - interval: 60m
            mode: pull
            name: pods
          - mode: watch
            name: pods
          - interval: 60m
            mode: pull
            name: deployments
          - mode: watch
            name: deployments
          - interval: 60m
            mode: pull
            name: statefulsets
          - mode: watch
            name: statefulsets
          - interval: 60m
            mode: pull
            name: replicasets
          - mode: watch
            name: replicasets
          - interval: 60m
            mode: pull
            name: daemonsets
          - mode: watch
            name: daemonsets
          - interval: 60m
            mode: pull
            name: jobs
          - mode: watch
            name: jobs
          - interval: 60m
            mode: pull
            name: cronjobs
          - mode: watch
            name: cronjobs
          - interval: 60m
            mode: pull
            name: nodes
          - mode: watch
            name: nodes
          - interval: 60m
            mode: pull
            name: services
          - mode: watch
            name: services
          - interval: 60m
            mode: pull
            name: persistentvolumes
          - mode: watch
            name: persistentvolumes
          - interval: 60m
            mode: pull
            name: persistentvolumeclaims
          - mode: watch
            name: persistentvolumeclaims
          - interval: 60m
            mode: pull
            name: ingresses
          - mode: watch
            name: ingresses
          - interval: 60m
            mode: pull
            name: configmaps
          - mode: watch
            name: configmaps
      service:
        extensions:
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/severity
            - transform/namespace
            - transform/entity_attributes
            - resource/events
            - swk8sattributes
            - transform/cleanup_attributes_for_nonexisting_entities
            - filter
            - transform/scope
            - batch
            receivers:
            - k8s_events
          logs/manifests:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - transform/set_labels_and_annotations_for_entities
            - transform/stringify_body
            - resource/manifest
            - swk8sattributes
            - transform/cleanup_attributes_for_nonexisting_entities
            - transform/scope
            - batch
            receivers:
            - k8sobjects
        telemetry:
          logs:
            level: info
          metrics:
            address: 0.0.0.0:8888
Custom events filter with old syntax:
  1: |
    events.config: |-
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 10
            queue_size: 1000
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        batch:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        filter:
          logs:
            include:
              match_type: regexp
              record_attributes:
              - key: k8s.namespace.name
                value: ^.*$
        groupbyattrs/manifest:
          keys:
          - k8s.pod.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.replicaset.name
          - k8s.daemonset.name
          - k8s.job.name
          - k8s.cronjob.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.service.name
          - k8s.persistentvolume.name
          - k8s.persistentvolumeclaim.name
          - k8s.ingress.name
          - sw.k8s.ingress.type
          - k8s.configmap.name
        memory_limiter:
          check_interval: 1s
          limit_mib: 512
          spike_limit_mib: 128
        resource/events:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: event
        resource/manifest:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: manifest
        swk8sattributes:
          auth_type: serviceAccount
          cronjob:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.cronjob.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: cronjob
                key_regex: (.*)
                tag_name: k8s.cronjob.labels.$$1
          daemonset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.daemonset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: daemonset
                key_regex: (.*)
                tag_name: k8s.daemonset.labels.$$1
          deployment:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.deployment.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: deployment
                key_regex: (.*)
                tag_name: k8s.deployment.labels.$$1
          extract:
            labels:
            - from: pod
              key_regex: (.*)
              tag_name: k8s.pod.labels.$$1
            - from: namespace
              key_regex: (.*)
              tag_name: k8s.namespace.labels.$$1
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          job:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.job.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: job
                key_regex: (.*)
                tag_name: k8s.job.labels.$$1
          node:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.node.name
            extract:
              labels:
              - from: node
                key_regex: (.*)
                tag_name: k8s.node.labels.$$1
          passthrough: false
          persistentvolume:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolume.name
            extract:
              labels:
              - from: persistentvolume
                key_regex: (.*)
                tag_name: k8s.persistentvolume.labels.$$1
          persistentvolumeclaim:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolumeclaim.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: persistentvolumeclaim
                key_regex: (.*)
                tag_name: k8s.persistentvolumeclaim.labels.$$1
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          replicaset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.replicaset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: replicaset
                key_regex: (.*)
                tag_name: k8s.replicaset.labels.$$1
          service:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.service.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: service
                key_regex: (.*)
                tag_name: k8s.service.labels.$$1
          set_object_existence: true
          statefulset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.statefulset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: statefulset
                key_regex: (.*)
                tag_name: k8s.statefulset.labels.$$1
        transform/cleanup_attributes_for_nonexisting_entities:
          log_statements:
          - context: log
            statements:
            - delete_key(resource.attributes, "k8s.pod.name") where resource.attributes["sw.k8s.pod.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.deployment.name") where resource.attributes["sw.k8s.deployment.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.statefulset.name") where resource.attributes["sw.k8s.statefulset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.replicaset.name") where resource.attributes["sw.k8s.replicaset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.daemonset.name") where resource.attributes["sw.k8s.daemonset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.job.name") where resource.attributes["sw.k8s.job.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.cronjob.name") where resource.attributes["sw.k8s.cronjob.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"]
              == "false"
            - delete_key(resource.attributes, "sw.k8s.pod.found")
            - delete_key(resource.attributes, "sw.k8s.deployment.found")
            - delete_key(resource.attributes, "sw.k8s.statefulset.found")
            - delete_key(resource.attributes, "sw.k8s.replicaset.found")
            - delete_key(resource.attributes, "sw.k8s.daemonset.found")
            - delete_key(resource.attributes, "sw.k8s.job.found")
            - delete_key(resource.attributes, "sw.k8s.cronjob.found")
            - delete_key(resource.attributes, "sw.k8s.node.found")
        transform/entity_attributes:
          log_statements:
          - context: log
            statements:
            - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Pod"
            - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Deployment"
            - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "StatefulSet"
            - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "ReplicaSet"
            - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "DaemonSet"
            - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Job"
            - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "CronJob"
            - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Node"
            - set(resource.attributes["k8s.namespace.name"], attributes["k8s.namespace.name"])
              where attributes["k8s.namespace.name"] != nil
            - delete_key(attributes, "k8s.namespace.name") where attributes["k8s.namespace.name"]
              != nil
        transform/manifest:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - set(attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            - set(attributes["watch.type"], body["type"]) where IsMap(body) and body["type"]
              != nil
            - set(body, body["object"]) where IsMap(body) and body["object"] != nil
            - set(attributes["k8s.pod.name"], body["metadata"]["name"]) where body["kind"]
              == "Pod"
            - set(attributes["k8s.deployment.name"], body["metadata"]["name"]) where body["kind"]
              == "Deployment"
            - set(attributes["k8s.statefulset.name"], body["metadata"]["name"]) where body["kind"]
              == "StatefulSet"
            - set(attributes["k8s.replicaset.name"], body["metadata"]["name"]) where body["kind"]
              == "ReplicaSet"
            - set(attributes["k8s.daemonset.name"], body["metadata"]["name"]) where body["kind"]
              == "DaemonSet"
            - set(attributes["k8s.job.name"], body["metadata"]["name"]) where body["kind"]
              == "Job"
            - set(attributes["k8s.cronjob.name"], body["metadata"]["name"]) where body["kind"]
              == "CronJob"
            - set(attributes["k8s.node.name"], body["metadata"]["name"]) where body["kind"]
              == "Node"
            - set(attributes["k8s.service.name"], body["metadata"]["name"]) where body["kind"]
              == "Service"
            - set(attributes["k8s.persistentvolume.name"], body["metadata"]["name"]) where
              body["kind"] == "PersistentVolume"
            - set(attributes["k8s.persistentvolumeclaim.name"], body["metadata"]["name"])
              where body["kind"] == "PersistentVolumeClaim"
            - set(attributes["k8s.namespace.name"], body["metadata"]["namespace"])
            - set(attributes["k8s.ingress.name"], body["metadata"]["name"]) where body["kind"]
              == "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["sw.k8s.ingress.type"], body["kind"]) where body["kind"] ==
              "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["k8s.configmap.name"], body["metadata"]["name"]) where body["kind"]
              == "ConfigMap"
            - set(attributes["k8s.object.kind"], body["kind"]) where body["kind"] != nil
            - delete_key(attributes, "k8s.resource.name")
            - delete_key(attributes, "event.name")
            - delete_key(attributes, "event.domain")
        transform/namespace:
          log_statements:
          - context: log
            statements:
            - set(attributes["sw.namespace"], "sw.events.inframon.k8s")
        transform/scope:
          log_statements:
          - context: scope
            statements:
            - set(name, "")
            - set(version, "")
        transform/set_labels_and_annotations_for_entities:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - flatten(body["metadata"]["annotations"], "k8s.pod.annotations") where body["kind"]
              == "Pod"
            - flatten(body["metadata"]["annotations"], "k8s.deployment.annotations") where
              body["kind"] == "Deployment"
            - flatten(body["metadata"]["annotations"], "k8s.statefulset.annotations") where
              body["kind"] == "StatefulSet"
            - flatten(body["metadata"]["annotations"], "k8s.replicaset.annotations") where
              body["kind"] == "ReplicaSet"
            - flatten(body["metadata"]["annotations"], "k8s.daemonset.annotations") where
              body["kind"] == "DaemonSet"
            - flatten(body["metadata"]["annotations"], "k8s.job.annotations") where body["kind"]
              == "Job"
            - flatten(body["metadata"]["annotations"], "k8s.cronjob.annotations") where
              body["kind"] == "CronJob"
            - flatten(body["metadata"]["annotations"], "k8s.node.annotations") where body["kind"]
              == "Node"
            - flatten(body["metadata"]["annotations"], "k8s.service.annotations") where
              body["kind"] == "Service"
            - flatten(body["metadata"]["annotations"], "k8s.persistentvolume.annotations")
              where body["kind"] == "PersistentVolume"
            - flatten(body["metadata"]["annotations"], "k8s.persistentvolumeclaim.annotations")
              where body["kind"] == "PersistentVolumeClaim"
            - flatten(body["metadata"]["annotations"], "k8s.ingress.annotations") where
              body["kind"] == "Ingress"
            - flatten(body["metadata"]["annotations"], "k8s.configmap.annotations") where
              body["kind"] == "ConfigMap"
            - merge_maps(resource.attributes, body["metadata"]["annotations"], "upsert")
              where body["kind"] == "Pod" or body["kind"] == "Deployment" or body["kind"]
              == "StatefulSet" or body["kind"] == "ReplicaSet" or body["kind"] == "DaemonSet"
              or body["kind"] == "Job" or body["kind"] == "CronJob" or body["kind"] == "Node"
              or body["kind"] == "Service" or body["kind"] == "PersistentVolume" or body["kind"]
              == "PersistentVolumeClaim" or body["kind"] == "Ingress" or body["kind"] ==
              "ConfigMap"
            - flatten(body["metadata"]["labels"], "k8s.pod.labels") where body["kind"] ==
              "Pod"
            - flatten(body["metadata"]["labels"], "k8s.deployment.labels") where body["kind"]
              == "Deployment"
            - flatten(body["metadata"]["labels"], "k8s.statefulset.labels") where body["kind"]
              == "StatefulSet"
            - flatten(body["metadata"]["labels"], "k8s.replicaset.labels") where body["kind"]
              == "ReplicaSet"
            - flatten(body["metadata"]["labels"], "k8s.daemonset.labels") where body["kind"]
              == "DaemonSet"
            - flatten(body["metadata"]["labels"], "k8s.job.labels") where body["kind"] ==
              "Job"
            - flatten(body["metadata"]["labels"], "k8s.cronjob.labels") where body["kind"]
              == "CronJob"
            - flatten(body["metadata"]["labels"], "k8s.node.labels") where body["kind"]
              == "Node"
            - flatten(body["metadata"]["labels"], "k8s.service.labels") where body["kind"]
              == "Service"
            - flatten(body["metadata"]["labels"], "k8s.persistentvolume.labels") where body["kind"]
              == "PersistentVolume"
            - flatten(body["metadata"]["labels"], "k8s.persistentvolumeclaim.labels") where
              body["kind"] == "PersistentVolumeClaim"
            - flatten(body["metadata"]["labels"], "k8s.ingress.labels") where body["kind"]
              == "Ingress"
            - flatten(body["metadata"]["labels"], "k8s.configmap.labels") where body["kind"]
              == "ConfigMap"
            - merge_maps(resource.attributes, body["metadata"]["labels"], "upsert") where
              body["kind"] == "Pod" or body["kind"] == "Deployment" or body["kind"] == "StatefulSet"
              or body["kind"] == "ReplicaSet" or body["kind"] == "DaemonSet" or body["kind"]
              == "Job" or body["kind"] == "CronJob" or body["kind"] == "Node" or body["kind"]
              == "Service" or body["kind"] == "PersistentVolume" or body["kind"] == "PersistentVolumeClaim"
              or body["kind"] == "Ingress" or body["kind"] == "ConfigMap"
        transform/severity:
          log_statements:
          - context: log
            statements:
            - set(severity_text, "Error") where attributes["k8s.event.reason"] == "Failed"
              or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
              == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
              == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
              == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
              == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
              or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
              "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
              attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
              or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
              == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(severity_number, 17) where attributes["k8s.event.reason"] == "Failed"
              or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
              == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
              == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
              == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
              == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
              or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
              "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
              attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
              or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
              == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(severity_text, "Warning") where attributes["k8s.event.reason"] == "ProbeWarning"
              or attributes["k8s.event.reason"] == "Unhealthy"
            - set(severity_number, 13) where attributes["k8s.event.reason"] == "ProbeWarning"
              or attributes["k8s.event.reason"] == "Unhealthy"
        transform/stringify_body:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - set(body, body.string)
      receivers:
        k8s_events: null
        k8sobjects:
          auth_type: serviceAccount
          objects:
          - interval: 60m
            mode: pull
            name: pods
          - mode: watch
            name: pods
          - interval: 60m
            mode: pull
            name: deployments
          - mode: watch
            name: deployments
          - interval: 60m
            mode: pull
            name: statefulsets
          - mode: watch
            name: statefulsets
          - interval: 60m
            mode: pull
            name: replicasets
          - mode: watch
            name: replicasets
          - interval: 60m
            mode: pull
            name: daemonsets
          - mode: watch
            name: daemonsets
          - interval: 60m
            mode: pull
            name: jobs
          - mode: watch
            name: jobs
          - interval: 60m
            mode: pull
            name: cronjobs
          - mode: watch
            name: cronjobs
          - interval: 60m
            mode: pull
            name: nodes
          - mode: watch
            name: nodes
          - interval: 60m
            mode: pull
            name: services
          - mode: watch
            name: services
          - interval: 60m
            mode: pull
            name: persistentvolumes
          - mode: watch
            name: persistentvolumes
          - interval: 60m
            mode: pull
            name: persistentvolumeclaims
          - mode: watch
            name: persistentvolumeclaims
          - interval: 60m
            mode: pull
            name: ingresses
          - mode: watch
            name: ingresses
          - interval: 60m
            mode: pull
            name: configmaps
          - mode: watch
            name: configmaps
      service:
        extensions:
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - filter
            - transform/severity
            - transform/namespace
            - transform/entity_attributes
            - resource/events
            - swk8sattributes
            - transform/cleanup_attributes_for_nonexisting_entities
            - transform/scope
            - batch
            receivers:
            - k8s_events
          logs/manifests:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - transform/set_labels_and_annotations_for_entities
            - transform/stringify_body
            - resource/manifest
            - swk8sattributes
            - transform/cleanup_attributes_for_nonexisting_entities
            - transform/scope
            - batch
            receivers:
            - k8sobjects
        telemetry:
          logs:
            level: info
          metrics:
            address: 0.0.0.0:8888
Events config should match snapshot when using default values:
  1: |
    events.config: |-
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 10
            queue_size: 1000
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        batch:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        groupbyattrs/manifest:
          keys:
          - k8s.pod.name
          - k8s.deployment.name
          - k8s.statefulset.name
          - k8s.replicaset.name
          - k8s.daemonset.name
          - k8s.job.name
          - k8s.cronjob.name
          - k8s.node.name
          - k8s.namespace.name
          - k8s.service.name
          - k8s.persistentvolume.name
          - k8s.persistentvolumeclaim.name
          - k8s.ingress.name
          - sw.k8s.ingress.type
          - k8s.configmap.name
        memory_limiter:
          check_interval: 1s
          limit_mib: 512
          spike_limit_mib: 128
        resource/events:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: event
        resource/manifest:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: manifest
        swk8sattributes:
          auth_type: serviceAccount
          cronjob:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.cronjob.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: cronjob
                key_regex: (.*)
                tag_name: k8s.cronjob.labels.$$1
          daemonset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.daemonset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: daemonset
                key_regex: (.*)
                tag_name: k8s.daemonset.labels.$$1
          deployment:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.deployment.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: deployment
                key_regex: (.*)
                tag_name: k8s.deployment.labels.$$1
          extract:
            labels:
            - from: pod
              key_regex: (.*)
              tag_name: k8s.pod.labels.$$1
            - from: namespace
              key_regex: (.*)
              tag_name: k8s.namespace.labels.$$1
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          job:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.job.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: job
                key_regex: (.*)
                tag_name: k8s.job.labels.$$1
          node:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.node.name
            extract:
              labels:
              - from: node
                key_regex: (.*)
                tag_name: k8s.node.labels.$$1
          passthrough: false
          persistentvolume:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolume.name
            extract:
              labels:
              - from: persistentvolume
                key_regex: (.*)
                tag_name: k8s.persistentvolume.labels.$$1
          persistentvolumeclaim:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolumeclaim.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: persistentvolumeclaim
                key_regex: (.*)
                tag_name: k8s.persistentvolumeclaim.labels.$$1
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          replicaset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.replicaset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: replicaset
                key_regex: (.*)
                tag_name: k8s.replicaset.labels.$$1
          service:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.service.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: service
                key_regex: (.*)
                tag_name: k8s.service.labels.$$1
          set_object_existence: true
          statefulset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.statefulset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: statefulset
                key_regex: (.*)
                tag_name: k8s.statefulset.labels.$$1
        transform/cleanup_attributes_for_nonexisting_entities:
          log_statements:
          - context: log
            statements:
            - delete_key(resource.attributes, "k8s.pod.name") where resource.attributes["sw.k8s.pod.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.deployment.name") where resource.attributes["sw.k8s.deployment.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.statefulset.name") where resource.attributes["sw.k8s.statefulset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.replicaset.name") where resource.attributes["sw.k8s.replicaset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.daemonset.name") where resource.attributes["sw.k8s.daemonset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.job.name") where resource.attributes["sw.k8s.job.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.cronjob.name") where resource.attributes["sw.k8s.cronjob.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"]
              == "false"
            - delete_key(resource.attributes, "sw.k8s.pod.found")
            - delete_key(resource.attributes, "sw.k8s.deployment.found")
            - delete_key(resource.attributes, "sw.k8s.statefulset.found")
            - delete_key(resource.attributes, "sw.k8s.replicaset.found")
            - delete_key(resource.attributes, "sw.k8s.daemonset.found")
            - delete_key(resource.attributes, "sw.k8s.job.found")
            - delete_key(resource.attributes, "sw.k8s.cronjob.found")
            - delete_key(resource.attributes, "sw.k8s.node.found")
        transform/entity_attributes:
          log_statements:
          - context: log
            statements:
            - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Pod"
            - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Deployment"
            - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "StatefulSet"
            - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "ReplicaSet"
            - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "DaemonSet"
            - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Job"
            - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "CronJob"
            - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Node"
            - set(resource.attributes["k8s.namespace.name"], attributes["k8s.namespace.name"])
              where attributes["k8s.namespace.name"] != nil
            - delete_key(attributes, "k8s.namespace.name") where attributes["k8s.namespace.name"]
              != nil
        transform/manifest:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - set(attributes["sw.namespace"], "sw.events.inframon.k8s.manifests")
            - set(attributes["watch.type"], body["type"]) where IsMap(body) and body["type"]
              != nil
            - set(body, body["object"]) where IsMap(body) and body["object"] != nil
            - set(attributes["k8s.pod.name"], body["metadata"]["name"]) where body["kind"]
              == "Pod"
            - set(attributes["k8s.deployment.name"], body["metadata"]["name"]) where body["kind"]
              == "Deployment"
            - set(attributes["k8s.statefulset.name"], body["metadata"]["name"]) where body["kind"]
              == "StatefulSet"
            - set(attributes["k8s.replicaset.name"], body["metadata"]["name"]) where body["kind"]
              == "ReplicaSet"
            - set(attributes["k8s.daemonset.name"], body["metadata"]["name"]) where body["kind"]
              == "DaemonSet"
            - set(attributes["k8s.job.name"], body["metadata"]["name"]) where body["kind"]
              == "Job"
            - set(attributes["k8s.cronjob.name"], body["metadata"]["name"]) where body["kind"]
              == "CronJob"
            - set(attributes["k8s.node.name"], body["metadata"]["name"]) where body["kind"]
              == "Node"
            - set(attributes["k8s.service.name"], body["metadata"]["name"]) where body["kind"]
              == "Service"
            - set(attributes["k8s.persistentvolume.name"], body["metadata"]["name"]) where
              body["kind"] == "PersistentVolume"
            - set(attributes["k8s.persistentvolumeclaim.name"], body["metadata"]["name"])
              where body["kind"] == "PersistentVolumeClaim"
            - set(attributes["k8s.namespace.name"], body["metadata"]["namespace"])
            - set(attributes["k8s.ingress.name"], body["metadata"]["name"]) where body["kind"]
              == "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["sw.k8s.ingress.type"], body["kind"]) where body["kind"] ==
              "Ingress" or body["kind"] == "VirtualService"
            - set(attributes["k8s.configmap.name"], body["metadata"]["name"]) where body["kind"]
              == "ConfigMap"
            - set(attributes["k8s.object.kind"], body["kind"]) where body["kind"] != nil
            - delete_key(attributes, "k8s.resource.name")
            - delete_key(attributes, "event.name")
            - delete_key(attributes, "event.domain")
        transform/namespace:
          log_statements:
          - context: log
            statements:
            - set(attributes["sw.namespace"], "sw.events.inframon.k8s")
        transform/scope:
          log_statements:
          - context: scope
            statements:
            - set(name, "")
            - set(version, "")
        transform/set_labels_and_annotations_for_entities:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - flatten(body["metadata"]["annotations"], "k8s.pod.annotations") where body["kind"]
              == "Pod"
            - flatten(body["metadata"]["annotations"], "k8s.deployment.annotations") where
              body["kind"] == "Deployment"
            - flatten(body["metadata"]["annotations"], "k8s.statefulset.annotations") where
              body["kind"] == "StatefulSet"
            - flatten(body["metadata"]["annotations"], "k8s.replicaset.annotations") where
              body["kind"] == "ReplicaSet"
            - flatten(body["metadata"]["annotations"], "k8s.daemonset.annotations") where
              body["kind"] == "DaemonSet"
            - flatten(body["metadata"]["annotations"], "k8s.job.annotations") where body["kind"]
              == "Job"
            - flatten(body["metadata"]["annotations"], "k8s.cronjob.annotations") where
              body["kind"] == "CronJob"
            - flatten(body["metadata"]["annotations"], "k8s.node.annotations") where body["kind"]
              == "Node"
            - flatten(body["metadata"]["annotations"], "k8s.service.annotations") where
              body["kind"] == "Service"
            - flatten(body["metadata"]["annotations"], "k8s.persistentvolume.annotations")
              where body["kind"] == "PersistentVolume"
            - flatten(body["metadata"]["annotations"], "k8s.persistentvolumeclaim.annotations")
              where body["kind"] == "PersistentVolumeClaim"
            - flatten(body["metadata"]["annotations"], "k8s.ingress.annotations") where
              body["kind"] == "Ingress"
            - flatten(body["metadata"]["annotations"], "k8s.configmap.annotations") where
              body["kind"] == "ConfigMap"
            - merge_maps(resource.attributes, body["metadata"]["annotations"], "upsert")
              where body["kind"] == "Pod" or body["kind"] == "Deployment" or body["kind"]
              == "StatefulSet" or body["kind"] == "ReplicaSet" or body["kind"] == "DaemonSet"
              or body["kind"] == "Job" or body["kind"] == "CronJob" or body["kind"] == "Node"
              or body["kind"] == "Service" or body["kind"] == "PersistentVolume" or body["kind"]
              == "PersistentVolumeClaim" or body["kind"] == "Ingress" or body["kind"] ==
              "ConfigMap"
            - flatten(body["metadata"]["labels"], "k8s.pod.labels") where body["kind"] ==
              "Pod"
            - flatten(body["metadata"]["labels"], "k8s.deployment.labels") where body["kind"]
              == "Deployment"
            - flatten(body["metadata"]["labels"], "k8s.statefulset.labels") where body["kind"]
              == "StatefulSet"
            - flatten(body["metadata"]["labels"], "k8s.replicaset.labels") where body["kind"]
              == "ReplicaSet"
            - flatten(body["metadata"]["labels"], "k8s.daemonset.labels") where body["kind"]
              == "DaemonSet"
            - flatten(body["metadata"]["labels"], "k8s.job.labels") where body["kind"] ==
              "Job"
            - flatten(body["metadata"]["labels"], "k8s.cronjob.labels") where body["kind"]
              == "CronJob"
            - flatten(body["metadata"]["labels"], "k8s.node.labels") where body["kind"]
              == "Node"
            - flatten(body["metadata"]["labels"], "k8s.service.labels") where body["kind"]
              == "Service"
            - flatten(body["metadata"]["labels"], "k8s.persistentvolume.labels") where body["kind"]
              == "PersistentVolume"
            - flatten(body["metadata"]["labels"], "k8s.persistentvolumeclaim.labels") where
              body["kind"] == "PersistentVolumeClaim"
            - flatten(body["metadata"]["labels"], "k8s.ingress.labels") where body["kind"]
              == "Ingress"
            - flatten(body["metadata"]["labels"], "k8s.configmap.labels") where body["kind"]
              == "ConfigMap"
            - merge_maps(resource.attributes, body["metadata"]["labels"], "upsert") where
              body["kind"] == "Pod" or body["kind"] == "Deployment" or body["kind"] == "StatefulSet"
              or body["kind"] == "ReplicaSet" or body["kind"] == "DaemonSet" or body["kind"]
              == "Job" or body["kind"] == "CronJob" or body["kind"] == "Node" or body["kind"]
              == "Service" or body["kind"] == "PersistentVolume" or body["kind"] == "PersistentVolumeClaim"
              or body["kind"] == "Ingress" or body["kind"] == "ConfigMap"
        transform/severity:
          log_statements:
          - context: log
            statements:
            - set(severity_text, "Error") where attributes["k8s.event.reason"] == "Failed"
              or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
              == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
              == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
              == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
              == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
              or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
              "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
              attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
              or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
              == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(severity_number, 17) where attributes["k8s.event.reason"] == "Failed"
              or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
              == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
              == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
              == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
              == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
              or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
              "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
              attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
              or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
              == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(severity_text, "Warning") where attributes["k8s.event.reason"] == "ProbeWarning"
              or attributes["k8s.event.reason"] == "Unhealthy"
            - set(severity_number, 13) where attributes["k8s.event.reason"] == "ProbeWarning"
              or attributes["k8s.event.reason"] == "Unhealthy"
        transform/stringify_body:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - set(body, body.string)
      receivers:
        k8s_events: null
        k8sobjects:
          auth_type: serviceAccount
          objects:
          - interval: 60m
            mode: pull
            name: pods
          - mode: watch
            name: pods
          - interval: 60m
            mode: pull
            name: deployments
          - mode: watch
            name: deployments
          - interval: 60m
            mode: pull
            name: statefulsets
          - mode: watch
            name: statefulsets
          - interval: 60m
            mode: pull
            name: replicasets
          - mode: watch
            name: replicasets
          - interval: 60m
            mode: pull
            name: daemonsets
          - mode: watch
            name: daemonsets
          - interval: 60m
            mode: pull
            name: jobs
          - mode: watch
            name: jobs
          - interval: 60m
            mode: pull
            name: cronjobs
          - mode: watch
            name: cronjobs
          - interval: 60m
            mode: pull
            name: nodes
          - mode: watch
            name: nodes
          - interval: 60m
            mode: pull
            name: services
          - mode: watch
            name: services
          - interval: 60m
            mode: pull
            name: persistentvolumes
          - mode: watch
            name: persistentvolumes
          - interval: 60m
            mode: pull
            name: persistentvolumeclaims
          - mode: watch
            name: persistentvolumeclaims
          - interval: 60m
            mode: pull
            name: ingresses
          - mode: watch
            name: ingresses
          - interval: 60m
            mode: pull
            name: configmaps
          - mode: watch
            name: configmaps
      service:
        extensions:
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/severity
            - transform/namespace
            - transform/entity_attributes
            - resource/events
            - swk8sattributes
            - transform/cleanup_attributes_for_nonexisting_entities
            - transform/scope
            - batch
            receivers:
            - k8s_events
          logs/manifests:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/manifest
            - groupbyattrs/manifest
            - transform/set_labels_and_annotations_for_entities
            - transform/stringify_body
            - resource/manifest
            - swk8sattributes
            - transform/cleanup_attributes_for_nonexisting_entities
            - transform/scope
            - batch
            receivers:
            - k8sobjects
        telemetry:
          logs:
            level: info
          metrics:
            address: 0.0.0.0:8888
Events config should not contain manifest collection pipeline when disabled:
  1: |
    events.config: |-
      exporters:
        otlp:
          endpoint: ${OTEL_ENVOY_ADDRESS}
          headers:
            Authorization: Bearer ${SOLARWINDS_API_TOKEN}
          retry_on_failure:
            enabled: true
            initial_interval: 10s
            max_elapsed_time: 300s
            max_interval: 30s
          sending_queue:
            enabled: true
            num_consumers: 10
            queue_size: 1000
          tls:
            insecure: ${OTEL_ENVOY_ADDRESS_TLS_INSECURE}
      extensions:
        health_check:
          endpoint: 0.0.0.0:13133
      processors:
        batch:
          send_batch_max_size: 512
          send_batch_size: 512
          timeout: 1s
        memory_limiter:
          check_interval: 1s
          limit_mib: 512
          spike_limit_mib: 128
        resource/events:
          attributes:
          - action: insert
            key: sw.k8s.agent.manifest.version
            value: ${MANIFEST_VERSION}
          - action: insert
            key: sw.k8s.agent.app.version
            value: ${APP_VERSION}
          - action: insert
            key: sw.k8s.cluster.uid
            value: ${CLUSTER_UID}
          - action: insert
            key: k8s.cluster.name
            value: ${CLUSTER_NAME}
          - action: insert
            key: sw.k8s.log.type
            value: event
        swk8sattributes:
          auth_type: serviceAccount
          cronjob:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.cronjob.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: cronjob
                key_regex: (.*)
                tag_name: k8s.cronjob.labels.$$1
          daemonset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.daemonset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: daemonset
                key_regex: (.*)
                tag_name: k8s.daemonset.labels.$$1
          deployment:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.deployment.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: deployment
                key_regex: (.*)
                tag_name: k8s.deployment.labels.$$1
          extract:
            labels:
            - from: pod
              key_regex: (.*)
              tag_name: k8s.pod.labels.$$1
            - from: namespace
              key_regex: (.*)
              tag_name: k8s.namespace.labels.$$1
            metadata:
            - k8s.deployment.name
            - k8s.replicaset.name
            - k8s.daemonset.name
            - k8s.job.name
            - k8s.cronjob.name
            - k8s.statefulset.name
            - k8s.node.name
          job:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.job.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: job
                key_regex: (.*)
                tag_name: k8s.job.labels.$$1
          node:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.node.name
            extract:
              labels:
              - from: node
                key_regex: (.*)
                tag_name: k8s.node.labels.$$1
          passthrough: false
          persistentvolume:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolume.name
            extract:
              labels:
              - from: persistentvolume
                key_regex: (.*)
                tag_name: k8s.persistentvolume.labels.$$1
          persistentvolumeclaim:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.persistentvolumeclaim.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: persistentvolumeclaim
                key_regex: (.*)
                tag_name: k8s.persistentvolumeclaim.labels.$$1
          pod_association:
          - sources:
            - from: resource_attribute
              name: k8s.pod.name
            - from: resource_attribute
              name: k8s.namespace.name
          replicaset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.replicaset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: replicaset
                key_regex: (.*)
                tag_name: k8s.replicaset.labels.$$1
          service:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.service.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: service
                key_regex: (.*)
                tag_name: k8s.service.labels.$$1
          set_object_existence: true
          statefulset:
            association:
            - sources:
              - from: resource_attribute
                name: k8s.statefulset.name
              - from: resource_attribute
                name: k8s.namespace.name
            extract:
              labels:
              - from: statefulset
                key_regex: (.*)
                tag_name: k8s.statefulset.labels.$$1
        transform/cleanup_attributes_for_nonexisting_entities:
          log_statements:
          - context: log
            statements:
            - delete_key(resource.attributes, "k8s.pod.name") where resource.attributes["sw.k8s.pod.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.deployment.name") where resource.attributes["sw.k8s.deployment.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.statefulset.name") where resource.attributes["sw.k8s.statefulset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.replicaset.name") where resource.attributes["sw.k8s.replicaset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.daemonset.name") where resource.attributes["sw.k8s.daemonset.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.job.name") where resource.attributes["sw.k8s.job.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.cronjob.name") where resource.attributes["sw.k8s.cronjob.found"]
              == "false"
            - delete_key(resource.attributes, "k8s.node.name") where resource.attributes["sw.k8s.node.found"]
              == "false"
            - delete_key(resource.attributes, "sw.k8s.pod.found")
            - delete_key(resource.attributes, "sw.k8s.deployment.found")
            - delete_key(resource.attributes, "sw.k8s.statefulset.found")
            - delete_key(resource.attributes, "sw.k8s.replicaset.found")
            - delete_key(resource.attributes, "sw.k8s.daemonset.found")
            - delete_key(resource.attributes, "sw.k8s.job.found")
            - delete_key(resource.attributes, "sw.k8s.cronjob.found")
            - delete_key(resource.attributes, "sw.k8s.node.found")
        transform/entity_attributes:
          log_statements:
          - context: log
            statements:
            - set(resource.attributes["k8s.pod.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Pod"
            - set(resource.attributes["k8s.deployment.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Deployment"
            - set(resource.attributes["k8s.statefulset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "StatefulSet"
            - set(resource.attributes["k8s.replicaset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "ReplicaSet"
            - set(resource.attributes["k8s.daemonset.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "DaemonSet"
            - set(resource.attributes["k8s.job.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Job"
            - set(resource.attributes["k8s.cronjob.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "CronJob"
            - set(resource.attributes["k8s.node.name"], resource.attributes["k8s.object.name"])
              where resource.attributes["k8s.object.kind"] == "Node"
            - set(resource.attributes["k8s.namespace.name"], attributes["k8s.namespace.name"])
              where attributes["k8s.namespace.name"] != nil
            - delete_key(attributes, "k8s.namespace.name") where attributes["k8s.namespace.name"]
              != nil
        transform/namespace:
          log_statements:
          - context: log
            statements:
            - set(attributes["sw.namespace"], "sw.events.inframon.k8s")
        transform/scope:
          log_statements:
          - context: scope
            statements:
            - set(name, "")
            - set(version, "")
        transform/severity:
          log_statements:
          - context: log
            statements:
            - set(severity_text, "Error") where attributes["k8s.event.reason"] == "Failed"
              or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
              == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
              == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
              == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
              == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
              or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
              "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
              attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
              or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
              == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(severity_number, 17) where attributes["k8s.event.reason"] == "Failed"
              or attributes["k8s.event.reason"] == "BackOff" or attributes["k8s.event.reason"]
              == "FailedKillPod" or attributes["k8s.event.reason"] == "FailedCreatePodContainer"
              or attributes["k8s.event.reason"] == "NetworkNotReady" or attributes["k8s.event.reason"]
              == "InspectFailed" or attributes["k8s.event.reason"] == "ErrImageNeverPull"
              or attributes["k8s.event.reason"] == "NodeNotReady" or attributes["k8s.event.reason"]
              == "NodeNotSchedulable" or attributes["k8s.event.reason"] == "KubeletSetupFailed"
              or attributes["k8s.event.reason"] == "FailedAttachVolume" or attributes["k8s.event.reason"]
              == "FailedMount" or attributes["k8s.event.reason"] == "VolumeResizeFailed"
              or attributes["k8s.event.reason"] == "FileSystemResizeFailed" or attributes["k8s.event.reason"]
              == "FailedMapVolume" or attributes["k8s.event.reason"] == "ContainerGCFailed"
              or attributes["k8s.event.reason"] == "ImageGCFailed" or attributes["k8s.event.reason"]
              == "FailedNodeAllocatableEnforcement" or attributes["k8s.event.reason"] ==
              "FailedCreatePodSandBox" or attributes["k8s.event.reason"] == "FailedPodSandBoxStatus"
              or attributes["k8s.event.reason"] == "FailedMountOnFilesystemMismatch" or
              attributes["k8s.event.reason"] == "InvalidDiskCapacity" or attributes["k8s.event.reason"]
              == "FreeDiskSpaceFailed" or attributes["k8s.event.reason"] == "FailedSync"
              or attributes["k8s.event.reason"] == "FailedValidation" or attributes["k8s.event.reason"]
              == "FailedPostStartHook" or attributes["k8s.event.reason"] == "FailedPreStopHook"
            - set(severity_text, "Warning") where attributes["k8s.event.reason"] == "ProbeWarning"
              or attributes["k8s.event.reason"] == "Unhealthy"
            - set(severity_number, 13) where attributes["k8s.event.reason"] == "ProbeWarning"
              or attributes["k8s.event.reason"] == "Unhealthy"
        transform/stringify_body:
          error_mode: ignore
          log_statements:
          - context: log
            statements:
            - set(body, body.string)
      receivers:
        k8s_events: null
      service:
        extensions:
        - health_check
        pipelines:
          logs:
            exporters:
            - otlp
            processors:
            - memory_limiter
            - transform/severity
            - transform/namespace
            - transform/entity_attributes
            - resource/events
            - swk8sattributes
            - transform/cleanup_attributes_for_nonexisting_entities
            - transform/scope
            - batch
            receivers:
            - k8s_events
        telemetry:
          logs:
            level: info
          metrics:
            address: 0.0.0.0:8888
