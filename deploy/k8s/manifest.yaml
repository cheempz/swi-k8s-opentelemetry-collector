---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: swi-opentelemetry-collector
  labels:
    app.kubernetes.io/name: swi-opentelemetry-collector
    app.kubernetes.io/instance: swi-opentelemetry-collector
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: swi-opentelemetry-collector
  labels:
    app: swi-opentelemetry-collector
rules:
- apiGroups:
  - ""
  resources:
  - events
  - namespaces
  - namespaces/status
  - nodes
  - nodes/spec
  - pods
  - pods/status
  - replicationcontrollers
  - replicationcontrollers/status
  - resourcequotas
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - extensions
  resources:
  - daemonsets
  - deployments
  - replicasets
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - batch
  resources:
  - jobs
  - cronjobs
  verbs:
  - get
  - list
  - watch
- apiGroups:
    - autoscaling
  resources:
    - horizontalpodautoscalers
  verbs:
    - get
    - list
    - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: swi-opentelemetry-collector
  labels:
    app: swi-opentelemetry-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: swi-opentelemetry-collector
subjects:
- kind: ServiceAccount
  name: swi-opentelemetry-collector
  namespace: <NAMESPACE>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: swi-opentelemetry-collector
  labels:
    app.kubernetes.io/name: opentelemetry-collector
    app.kubernetes.io/instance: swi-opentelemetry-collector
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: opentelemetry-collector
      app.kubernetes.io/instance: swi-opentelemetry-collector
      component: standalone-collector
  template:
    metadata:
      labels:
        app.kubernetes.io/name: opentelemetry-collector
        app.kubernetes.io/instance: swi-opentelemetry-collector
        component: standalone-collector
    spec:
      serviceAccountName: swi-opentelemetry-collector
      securityContext: {}
      containers:
        - name: opentelemetry-collector
          securityContext: {}
          image: "solarwinds/swi-opentelemetry-collector:latest"
          imagePullPolicy: Always
          env:
            - name: MY_POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: solarwinds-api-token
                  key: SOLARWINDS_API_TOKEN
                  optional: true
            - name: PROMETHEUS_URL
              value: "<PROMETHEUS_URL>"
            - name: OTEL_ENVOY_ADDRESS
              value: "<OTEL_ENVOY_ADDRESS>"
            - name: CLUSTER_NAME
              value: "<CLUSTER_NAME>"
            - name: CLUSTER_UID
              value: "<CLUSTER_UID>"
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
            limits:
              cpu: 256m
              memory: 512Mi
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: swi-opentelemetry-collector-logs
spec:
  selector:
    matchLabels:
      k8s-app: swi-opentelemetry-collector-logs
  template:
    metadata:
      labels:
        k8s-app: swi-opentelemetry-collector-logs
    spec:
      terminationGracePeriodSeconds: 30
      securityContext:
        ## In order to reliably read logs from mounted node logging paths, we need to run as root
        fsGroup: 0
        runAsUser: 0
        runAsGroup: 0
      containers:
        - name: swi-opentelemetry-collector
          image: "solarwinds/swi-opentelemetry-collector:latest"
          imagePullPolicy: Always
          command:
            - /swi-otelcol
            - --config=/opt/log-config.yaml
          env:
            - name: POD_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: spec.nodeName
            - name: SOLARWINDS_API_TOKEN
              valueFrom:
                secretKeyRef:
                  name: solarwinds-api-token
                  key: SOLARWINDS_API_TOKEN
                  optional: true
            - name: OTEL_ENVOY_ADDRESS
              value: "<OTEL_ENVOY_ADDRESS>"
            - name: CLUSTER_NAME
              value: "<CLUSTER_NAME>"
            - name: CLUSTER_UID
              value: "<CLUSTER_UID>"
          livenessProbe:
            httpGet:
              path: /
              port: 13133
          readinessProbe:
            httpGet:
              path: /
              port: 13133
          resources:
            requests:
              cpu: 100m
              memory: 32Mi
            limits:
              cpu: 1000m
              memory: 1Gi
          volumeMounts:
            - mountPath: /var/log/pods
              name: varlogpods
              readOnly: true
            - mountPath: /var/log/containers
              name: varlogcontainers
              readOnly: true
            - mountPath: /var/lib/docker/containers
              name: varlibdockercontainers
              readOnly: true
      volumes:
        - name: varlogpods
          hostPath:
            path: /var/log/pods
        - name: varlogcontainers
          hostPath:
            path: /var/log/containers
        - name: varlibdockercontainers
          hostPath:
            path: /var/lib/docker/containers