apiVersion: skaffold/v3
kind: Config
metadata:
  name: swi-k8s-opentelemetry-collector
build:
  artifacts:
    - image: swi-k8s-opentelemetry-collector
      context: solarwinds-otel-collector
      docker:
        dockerfile: build/docker/Dockerfile.k8s
    - image: integration-test
      docker:
        dockerfile: build/docker/IntegrationTest.Dockerfile
        buildArgs: 
          CI: "{{ .CI }}"
  local:
    push: false
resourceSelector:
  allow:
    # let skaffold to manager CRDs in local k8s
    - groupKind: "OpenTelemetryCollector.opentelemetry.io"
      image: [".*"]
      labels: [".*"]
    - groupKind: "PodMonitor.monitoring.coreos.com"
      image: [".*"]
      labels: [".*"]
    - groupKind: "ServiceMonitor.monitoring.coreos.com"
      image: [".*"]
      labels: [".*"]
deploy:
  helm:
    hooks:
      before:
        - host:
            command: ["sh", "-c", "./utils/pre-deploy.sh"]
            os: [darwin, linux]
        - host:
            command: ["cmd", "/c", ".\\utils\\pre-deploy.bat || exit 0"]
            os: [windows]
    releases:
      - name: timeseries-mock-service
        chartPath: tests/deploy/timeseries-mock-service
        namespace: test-namespace
        createNamespace: true
        upgradeOnChange: true
      - name: sut
        chartPath: deploy/helm
        namespace: test-namespace
        createNamespace: true
        setValueTemplates:
          kube-state-metrics:
            enabled: true
          cluster:
            name: "cluster name"
            uid: "cluster-uid-123456789"
          otel:
            endpoint: timeseries-mock-service:9082
            tls_insecure: true
            # OTEL collector requires the SOLARWINDS_API_TOKEN env variable to be set to some not empty string
            api_token: "not_set"
            image:
              repository: "swi-k8s-opentelemetry-collector"
              tag: "{{.IMAGE_TAG}}"
              pullPolicy: "Never"
            node_collector:
              sending_queue:
                persistent_storage:
                  enabled: true
            metrics:
              enabled: true
              prometheus_check: false
              sending_queue:
                offload_to_disk: true
              prometheus:
                scrape_interval: "15s"
              kube-state-metrics:
                scrape_interval: "15s"
              control_plane:
                controller_manager:
                  enabled: false
                etcd:
                  enabled: false
              k8s_instrumentation:
                annotations:
                  # excluded annotations:
                  # * kubectl.kubernetes.io/last-applied-configuration - deployed by kubectl, contains full config for each resource
                  # * cni.projectcalico.org/ - deployed in CI system (k3s)
                  excludePattern: "(kubectl\\.kubernetes\\.io/last-applied-configuration)|(cni\\.projectcalico\\.org/.*)|(deployment\\.kubernetes\\.io/revision)|(deprecated\\.daemonset\\.template\\.generation)"
                labels:
                  # excluded labels:
                  # * skaffold.dev/ - deployed by skaffold, contains unique ids so it must be excluded
                  excludePattern: "skaffold\\.dev/.*"
              autodiscovery:
                discovery_collector:
                  enabled: true
                prometheusEndpoints: 
                  enabled: true
                  customTransformations:
                    counterToRate:
                      - k8s.otelcol_exporter_sent_metric_points
                      - k8s.otelcol_exporter_sent_log_records
                  filter:
                    exclude:
                      match_type: regexp
                      metric_names:
                        - k8s.otelcol_processor.*
                  podMonitors:
                    rules:
                      - rule: labels["app"] == "test-deployment"
                        metrics_path: "/custom_metrics"
                        endpoint_port: 8081
                prefix: ""
            events:
              enabled: true
              sending_queue:
                offload_to_disk: true
            manifests:
              enabled: true
              pull_every: 1m
              persistent_storage:
                enabled: false
            logs:
              # journal on Docker Desktop is not supported
              enabled: true
              journal: false
              filter:
                log_record:
                  - resource.attributes["k8s.namespace.name"] == "test-namespace"
          certmanager:
            enabled: true
          operator:
            enabled: true
          ebpfNetworkMonitoring:
            enabled: true
          prometheusCRDs:
            install: true
          beyla:
            enabled: true
        upgradeOnChange: true
      # Deploy prometheus for development purposes. Metrics prefixed with `output_` contains metrics produced by the agent
      - name: timeseries-mock-service-custom-resources
        chartPath: tests/deploy/timeseries-mock-service-custom-resources
        namespace: test-namespace
        createNamespace: true
        upgradeOnChange: true
      - name: monitoring
        remoteChart: kube-prometheus-stack
        namespace: test-namespace
        createNamespace: true
        repo: https://prometheus-community.github.io/helm-charts
        version: 69.3.2
        setValues:
          alertmanager.enabled: false
          grafana.enabled: false
          nodeExporter.enabled: false
          kubeStateMetrics.enabled: false
          server:
            nodeSelector:
              "kubernetes\\.io\\/os": linux
      - name: tests
        chartPath: tests/deploy/tests
        namespace: test-namespace
        createNamespace: true
        upgradeOnChange: true
        setValueTemplates:
          podMonitors:
            enabled: true
  kubeContext: docker-desktop
portForward:
- resourceType: service
  resourceName: timeseries-mock-service
  namespace: test-namespace
  port: 8088
- resourceType: service
  resourceName: prometheus-operated
  namespace: test-namespace
  port: 9090
  localPort: 8080
profiles:
  - name: test-cluster
    build:
      artifacts:
        - image: swi-k8s-opentelemetry-collector
          context: solarwinds-otel-collector
          docker:
            dockerfile: build/docker/Dockerfile.k8s
      local:
        push: true
    patches:
    # remove timeseries-mock-service
    - op: remove
      path: /deploy/helm/releases/0
    # remove timeseries-mock-service-custom-resources
    - op: remove
      path: /deploy/helm/releases/1
    - op: replace
      path: /deploy/helm/releases/0/namespace
      value: "{{.TEST_CLUSTER_NAMESPACE}}"
    - op: replace
      path: /deploy/helm/releases/0/name
      value: "{{.TEST_CLUSTER_RELEASE_NAME}}"
    - op: replace
      path: /portForward/0/namespace
      value: "{{.TEST_CLUSTER_NAMESPACE}}"
    - op: replace
      path: /portForward/1/namespace
      value: "{{.TEST_CLUSTER_NAMESPACE}}"
    - op: replace
      path: /portForward/1/resourceName
      value: "{{.TEST_CLUSTER_RELEASE_NAME}}-prometheus-server"
    - op: replace
      path: /deploy/kubectl/defaultNamespace
      value: "{{.TEST_CLUSTER_NAMESPACE}}"
    - op: remove
      path: /manifests/kustomize/paths/0
    - op: replace
      path: /deploy/helm/releases/1/namespace
      value: "{{.TEST_CLUSTER_NAMESPACE}}"
    - op: replace
      path: /deploy/helm/releases/1/name
      value: "{{.TEST_CLUSTER_RELEASE_NAME}}-prometheus"
    - op: replace
      path: /deploy/kubeContext
      value: "<your kube context here>"
  - name: ci
    activation:
      - env: CI=true
    build:
      local:
        push: false
        useBuildkit: true
        concurrency: 0
    patches:
    # remove `monitoring` (Prometheus Operator)
    - op: remove
      path: /deploy/helm/releases/3
    - op: remove
      path: /portForward/1
    deploy:
      kubeContext: default
  - name: ci-helm-e2e
    patches:
      - op: remove
        path: /build/artifacts/0
      - op: remove
        path: /deploy/helm/releases/1/setValueTemplates/otel.image.repository
      - op: remove
        path: /deploy/helm/releases/1/setValueTemplates/otel.image.tag
      - op: remove
        path: /deploy/helm/releases/1/setValueTemplates/otel.image.pullPolicy
    build:
      local:
        push: false
        useBuildkit: true
        concurrency: 0
    deploy:
      # `default` is k3s default context name
      kubeContext: default
